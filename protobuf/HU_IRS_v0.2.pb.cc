// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HU_IRS_v0.2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HU_IRS_v0.2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class ContrlinfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Contrlinfo> {
} _Contrlinfo_default_instance_;
class IHUContrlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IHUContrl> {
} _IHUContrl_default_instance_;
class RespondInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RespondInfo> {
} _RespondInfo_default_instance_;
class IRSRespondDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IRSRespond> {
} _IRSRespond_default_instance_;
class MsgResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsgResult> {
} _MsgResult_default_instance_;
class TopMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TopMessage> {
} _TopMessage_default_instance_;

namespace protobuf_HU_5fIRS_5fv0_2e2_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contrlinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contrlinfo, voice_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contrlinfo, emoji_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contrlinfo, emoji_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contrlinfo, turnangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contrlinfo, backlight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contrlinfo, main_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contrlinfo, face_recognition_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contrlinfo, welcome_mode_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contrlinfo, see_off_mode_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contrlinfo, emotion_recognition_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contrlinfo, fatigue_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contrlinfo, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contrlinfo, license_url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IHUContrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IHUContrl, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IHUContrl, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondInfo, faceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondInfo, emotion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondInfo, fatigue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondInfo, main_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondInfo, face_recognition_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondInfo, welcome_mode_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondInfo, see_off_mode_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondInfo, emotion_recognition_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondInfo, fatigue_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondInfo, fail_image_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondInfo, video_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondInfo, photo_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondInfo, activation_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRSRespond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRSRespond, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IRSRespond, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResult, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResult, error_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, message_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, ihu_ctrl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, irs_return_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopMessage, msg_result_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Contrlinfo)},
  { 17, -1, sizeof(IHUContrl)},
  { 23, -1, sizeof(RespondInfo)},
  { 41, -1, sizeof(IRSRespond)},
  { 47, -1, sizeof(MsgResult)},
  { 53, -1, sizeof(TopMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Contrlinfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IHUContrl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RespondInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IRSRespond_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TopMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "HU_IRS_v0.2.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _Contrlinfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _IHUContrl_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RespondInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _IRSRespond_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _MsgResult_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _TopMessage_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Contrlinfo_default_instance_.DefaultConstruct();
  _IHUContrl_default_instance_.DefaultConstruct();
  _RespondInfo_default_instance_.DefaultConstruct();
  _IRSRespond_default_instance_.DefaultConstruct();
  _MsgResult_default_instance_.DefaultConstruct();
  _TopMessage_default_instance_.DefaultConstruct();
  _IHUContrl_default_instance_.get_mutable()->info_ = const_cast< ::Contrlinfo*>(
      ::Contrlinfo::internal_default_instance());
  _IRSRespond_default_instance_.get_mutable()->result_ = const_cast< ::RespondInfo*>(
      ::RespondInfo::internal_default_instance());
  _TopMessage_default_instance_.get_mutable()->ihu_ctrl_ = const_cast< ::IHUContrl*>(
      ::IHUContrl::internal_default_instance());
  _TopMessage_default_instance_.get_mutable()->irs_return_ = const_cast< ::IRSRespond*>(
      ::IRSRespond::internal_default_instance());
  _TopMessage_default_instance_.get_mutable()->msg_result_ = const_cast< ::MsgResult*>(
      ::MsgResult::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021HU_IRS_v0.2.proto\"\315\002\n\nContrlinfo\022\026\n\016vo"
      "ice_position\030\001 \001(\005\022\036\n\nEmoji_type\030\002 \001(\0162\n"
      ".EMOJITYPE\022\022\n\nEmoji_time\030\003 \001(\005\022\021\n\tturnAn"
      "gle\030\004 \001(\005\022\021\n\tbacklight\030\005 \001(\005\022\023\n\013main_swi"
      "tch\030\006 \001(\010\022\037\n\027face_recognition_switch\030\007 \001"
      "(\010\022\033\n\023welcome_mode_switch\030\010 \001(\010\022\033\n\023see_o"
      "ff_mode_switch\030\t \001(\010\022\"\n\032emotion_recognit"
      "ion_switch\030\n \001(\010\022\026\n\016fatigue_switch\030\013 \001(\010"
      "\022\014\n\004uuid\030\014 \001(\t\022\023\n\013license_url\030\r \001(\t\"A\n\tI"
      "HUContrl\022\031\n\004type\030\001 \001(\0162\013.Contrltype\022\031\n\004i"
      "nfo\030\002 \001(\0132\013.Contrlinfo\"\364\002\n\013RespondInfo\022\016"
      "\n\006status\030\001 \001(\005\022\016\n\006faceid\030\002 \001(\005\022 \n\007emotio"
      "n\030\003 \001(\0162\017.Driver_Emotion\022 \n\007fatigue\030\004 \001("
      "\0162\017.Driver_Fatigue\022\023\n\013main_switch\030\005 \001(\010\022"
      "\037\n\027face_recognition_switch\030\006 \001(\010\022\033\n\023welc"
      "ome_mode_switch\030\007 \001(\010\022\033\n\023see_off_mode_sw"
      "itch\030\010 \001(\010\022\"\n\032emotion_recognition_switch"
      "\030\t \001(\010\022\026\n\016fatigue_switch\030\n \001(\010\022\026\n\016fail_i"
      "mage_url\030\013 \001(\t\022\021\n\tvideo_url\030\014 \001(\t\022\021\n\tpho"
      "to_url\030\r \001(\t\022\027\n\017activation_code\030\016 \001(\t\"F\n"
      "\nIRSRespond\022\032\n\004type\030\001 \001(\0162\014.RespondType\022"
      "\034\n\006result\030\002 \001(\0132\014.RespondInfo\"/\n\tMsgResu"
      "lt\022\016\n\006result\030\001 \001(\010\022\022\n\nerror_code\030\002 \001(\014\"\217"
      "\001\n\nTopMessage\022\"\n\014message_type\030\001 \001(\0162\014.Me"
      "ssagetype\022\034\n\010IHU_ctrl\030\002 \001(\0132\n.IHUContrl\022"
      "\037\n\nIRS_Return\030\003 \001(\0132\013.IRSRespond\022\036\n\nmsg_"
      "result\030\004 \001(\0132\n.MsgResult*\357\005\n\013Messagetype"
      "\022\031\n\025REQUEST_RESPONSE_NONE\020\000\022\034\n\030REQUEST_H"
      "EARTBEAT_SIGNAL\020\001\022\035\n\031RESPONSE_HEARTBEAT_"
      "RESULT\020\002\022\033\n\027REQUEST_CHANGE_SETTINGS\020\003\022\034\n"
      "\030RESPONSE_CHANGE_SETTINGS\020\004\022\030\n\024REQUEST_G"
      "ET_SETTINGS\020\005\022\031\n\025RESPONSE_GET_SETTINGS\020\006"
      "\022\031\n\025REQUEST_FACE_IDENTIFY\020\007\022\032\n\026RESPONSE_"
      "FACE_IDENTIFY\020\010\022\026\n\022REQUEST_IRS_ACTION\020\t\022"
      "\027\n\023RESPONSE_IRS_ACTION\020\n\022\030\n\024REQUEST_WELC"
      "OME_MODE\020\013\022\031\n\025RESPONSE_WELCOME_MODE\020\014\022\030\n"
      "\024REQUEST_SEE_OFF_MODE\020\r\022\031\n\025RESPONSE_SEE_"
      "OFF_MODE\020\016\022\030\n\024REQUEST_FACEINFO_ADD\020\017\022\031\n\025"
      "RESPONSE_FACEINFO_ADD\020\020\022\030\n\024REQUEST_FACEI"
      "NFO_DEL\020\021\022\031\n\025RESPONSE_FACEINFO_DEL\020\022\022\024\n\020"
      "RESPONSE_EMOTION\020\023\022\025\n\021RESPONSE_FATIGUER\020"
      "\024\022\030\n\024REQUEST_BACKLIGHTSET\020\025\022\031\n\025RESPONSE_"
      "BACKLIGHTSET\020\026\022\035\n\031REQUEST_RECORD_VIDEO_C"
      "TRL\020\027\022\036\n\032RESPONSE_RECORD_VIDEO_CTRL\020\030\022\034\n"
      "\030REQUEST_GET_PICTURE_CTRL\020\031\022\035\n\031RESPONSE_"
      "GET_PICTURE_CTRL\020\032*\216\001\n\nContrltype\022\024\n\020Con"
      "trltype_START\020\000\022\023\n\017Contrltype_STOP\020\001\022\024\n\020"
      "Contrltype_PAUSE\020\002\022\027\n\023Contrltype_CONTINU"
      "E\020\003\022\022\n\016Contrltype_GET\020\004\022\022\n\016Contrltype_SE"
      "T\020\005*:\n\016Driver_Emotion\022\022\n\016NORMAL_Emotion\020"
      "\000\022\t\n\005HAPPY\020\001\022\t\n\005ANGRY\020\002*C\n\016Driver_Fatigu"
      "e\022\022\n\016NORMAL_Fatigue\020\000\022\007\n\003LOW\020\001\022\n\n\006MIDDLE"
      "\020\002\022\010\n\004HIGH\020\003*\247\004\n\tEMOJITYPE\022\t\n\005SMILE\020\000\022\t\n"
      "\005LAUGH\020\001\022\014\n\010BIG_EYES\020\002\022\n\n\006SQUINT\020\003\022\t\n\005BL"
      "INK\020\004\022\014\n\010SWEATING\020\005\022\016\n\nCOLD_SWEAT\020\006\022\007\n\003R"
      "UN\020\007\022\010\n\004JUMP\020\010\022\t\n\005THINK\020\036\022\007\n\003NOD\020<\022\t\n\005SH"
      "AKE\020=\022\013\n\007UP_VOTE\020>\022\021\n\rSEARCH_AROUND\020\?\022\r\n"
      "\tMAGNIFIER\020@\022\016\n\nSEARCH_BAG\020A\022\r\n\tLOOK_DOW"
      "N\020B\022\r\n\tLOOK_LEFT\020C\022\016\n\nLOOK_RIGHT\020D\022\024\n\020HA"
      "NDS_LOVE_HEART\020E\022\014\n\010AIR_KISS\020F\022\r\n\tEXCELL"
      "ENT\020G\022\t\n\005DOUBT\020H\022\022\n\016PECULIAR_SMILE\020I\022\013\n\007"
      "DESPISE\020J\022\t\n\005CROSS\020K\022\020\n\014HANDS_WAVING\020L\022\010"
      "\n\004TICK\020M\022\010\n\004CLAP\020N\022\016\n\nSUNGLASSES\020d\022\014\n\010UM"
      "BRELLA\020e\022\r\n\tWEAR_MASK\020f\022\023\n\017MAKE_PHONE_CA"
      "LL\020g\022\014\n\010READ_MAP\020h\022\032\n\026MUSIC_WITH_EARPHON"
      "E_ON\020i\022\n\n\006CAMERA\020j\022\010\n\004BLOW\020k\022\020\n\014WAVE_GOO"
      "DBYE\020l*y\n\013RespondType\022\025\n\021RespondType_STA"
      "RT\020\000\022\023\n\017RespondType_END\020\001\022\023\n\017RespondType"
      "_GET\020\002\022\023\n\017RespondType_SET\020\003\022\024\n\020RespondTy"
      "pe_AUTO\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2777);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HU_IRS_v0.2.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_HU_5fIRS_5fv0_2e2_2eproto

const ::google::protobuf::EnumDescriptor* Messagetype_descriptor() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_enum_descriptors[0];
}
bool Messagetype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Contrltype_descriptor() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_enum_descriptors[1];
}
bool Contrltype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Driver_Emotion_descriptor() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_enum_descriptors[2];
}
bool Driver_Emotion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Driver_Fatigue_descriptor() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_enum_descriptors[3];
}
bool Driver_Fatigue_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMOJITYPE_descriptor() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_enum_descriptors[4];
}
bool EMOJITYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 30:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RespondType_descriptor() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_enum_descriptors[5];
}
bool RespondType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Contrlinfo::kVoicePositionFieldNumber;
const int Contrlinfo::kEmojiTypeFieldNumber;
const int Contrlinfo::kEmojiTimeFieldNumber;
const int Contrlinfo::kTurnAngleFieldNumber;
const int Contrlinfo::kBacklightFieldNumber;
const int Contrlinfo::kMainSwitchFieldNumber;
const int Contrlinfo::kFaceRecognitionSwitchFieldNumber;
const int Contrlinfo::kWelcomeModeSwitchFieldNumber;
const int Contrlinfo::kSeeOffModeSwitchFieldNumber;
const int Contrlinfo::kEmotionRecognitionSwitchFieldNumber;
const int Contrlinfo::kFatigueSwitchFieldNumber;
const int Contrlinfo::kUuidFieldNumber;
const int Contrlinfo::kLicenseUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Contrlinfo::Contrlinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_HU_5fIRS_5fv0_2e2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Contrlinfo)
}
Contrlinfo::Contrlinfo(const Contrlinfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  license_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.license_url().size() > 0) {
    license_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.license_url_);
  }
  ::memcpy(&voice_position_, &from.voice_position_,
    reinterpret_cast<char*>(&fatigue_switch_) -
    reinterpret_cast<char*>(&voice_position_) + sizeof(fatigue_switch_));
  // @@protoc_insertion_point(copy_constructor:Contrlinfo)
}

void Contrlinfo::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&voice_position_, 0, reinterpret_cast<char*>(&fatigue_switch_) -
    reinterpret_cast<char*>(&voice_position_) + sizeof(fatigue_switch_));
  _cached_size_ = 0;
}

Contrlinfo::~Contrlinfo() {
  // @@protoc_insertion_point(destructor:Contrlinfo)
  SharedDtor();
}

void Contrlinfo::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Contrlinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Contrlinfo::descriptor() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_metadata[0].descriptor;
}

const Contrlinfo& Contrlinfo::default_instance() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::InitDefaults();
  return *internal_default_instance();
}

Contrlinfo* Contrlinfo::New(::google::protobuf::Arena* arena) const {
  Contrlinfo* n = new Contrlinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Contrlinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Contrlinfo)
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&voice_position_, 0, reinterpret_cast<char*>(&fatigue_switch_) -
    reinterpret_cast<char*>(&voice_position_) + sizeof(fatigue_switch_));
}

bool Contrlinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Contrlinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 voice_position = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voice_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EMOJITYPE Emoji_type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_emoji_type(static_cast< ::EMOJITYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Emoji_time = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emoji_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 turnAngle = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turnangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 backlight = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backlight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool main_switch = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &main_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool face_recognition_switch = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &face_recognition_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool welcome_mode_switch = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &welcome_mode_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool see_off_mode_switch = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &see_off_mode_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool emotion_recognition_switch = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emotion_recognition_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fatigue_switch = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fatigue_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uuid = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Contrlinfo.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string license_url = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_license_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->license_url().data(), this->license_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Contrlinfo.license_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Contrlinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Contrlinfo)
  return false;
#undef DO_
}

void Contrlinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Contrlinfo)
  // int32 voice_position = 1;
  if (this->voice_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->voice_position(), output);
  }

  // .EMOJITYPE Emoji_type = 2;
  if (this->emoji_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->emoji_type(), output);
  }

  // int32 Emoji_time = 3;
  if (this->emoji_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->emoji_time(), output);
  }

  // int32 turnAngle = 4;
  if (this->turnangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->turnangle(), output);
  }

  // int32 backlight = 5;
  if (this->backlight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->backlight(), output);
  }

  // bool main_switch = 6;
  if (this->main_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->main_switch(), output);
  }

  // bool face_recognition_switch = 7;
  if (this->face_recognition_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->face_recognition_switch(), output);
  }

  // bool welcome_mode_switch = 8;
  if (this->welcome_mode_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->welcome_mode_switch(), output);
  }

  // bool see_off_mode_switch = 9;
  if (this->see_off_mode_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->see_off_mode_switch(), output);
  }

  // bool emotion_recognition_switch = 10;
  if (this->emotion_recognition_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->emotion_recognition_switch(), output);
  }

  // bool fatigue_switch = 11;
  if (this->fatigue_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->fatigue_switch(), output);
  }

  // string uuid = 12;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Contrlinfo.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->uuid(), output);
  }

  // string license_url = 13;
  if (this->license_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->license_url().data(), this->license_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Contrlinfo.license_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->license_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:Contrlinfo)
}

::google::protobuf::uint8* Contrlinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Contrlinfo)
  // int32 voice_position = 1;
  if (this->voice_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->voice_position(), target);
  }

  // .EMOJITYPE Emoji_type = 2;
  if (this->emoji_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->emoji_type(), target);
  }

  // int32 Emoji_time = 3;
  if (this->emoji_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->emoji_time(), target);
  }

  // int32 turnAngle = 4;
  if (this->turnangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->turnangle(), target);
  }

  // int32 backlight = 5;
  if (this->backlight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->backlight(), target);
  }

  // bool main_switch = 6;
  if (this->main_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->main_switch(), target);
  }

  // bool face_recognition_switch = 7;
  if (this->face_recognition_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->face_recognition_switch(), target);
  }

  // bool welcome_mode_switch = 8;
  if (this->welcome_mode_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->welcome_mode_switch(), target);
  }

  // bool see_off_mode_switch = 9;
  if (this->see_off_mode_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->see_off_mode_switch(), target);
  }

  // bool emotion_recognition_switch = 10;
  if (this->emotion_recognition_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->emotion_recognition_switch(), target);
  }

  // bool fatigue_switch = 11;
  if (this->fatigue_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->fatigue_switch(), target);
  }

  // string uuid = 12;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Contrlinfo.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->uuid(), target);
  }

  // string license_url = 13;
  if (this->license_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->license_url().data(), this->license_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Contrlinfo.license_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->license_url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Contrlinfo)
  return target;
}

size_t Contrlinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Contrlinfo)
  size_t total_size = 0;

  // string uuid = 12;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // string license_url = 13;
  if (this->license_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->license_url());
  }

  // int32 voice_position = 1;
  if (this->voice_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->voice_position());
  }

  // .EMOJITYPE Emoji_type = 2;
  if (this->emoji_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->emoji_type());
  }

  // int32 Emoji_time = 3;
  if (this->emoji_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emoji_time());
  }

  // int32 turnAngle = 4;
  if (this->turnangle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->turnangle());
  }

  // int32 backlight = 5;
  if (this->backlight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->backlight());
  }

  // bool main_switch = 6;
  if (this->main_switch() != 0) {
    total_size += 1 + 1;
  }

  // bool face_recognition_switch = 7;
  if (this->face_recognition_switch() != 0) {
    total_size += 1 + 1;
  }

  // bool welcome_mode_switch = 8;
  if (this->welcome_mode_switch() != 0) {
    total_size += 1 + 1;
  }

  // bool see_off_mode_switch = 9;
  if (this->see_off_mode_switch() != 0) {
    total_size += 1 + 1;
  }

  // bool emotion_recognition_switch = 10;
  if (this->emotion_recognition_switch() != 0) {
    total_size += 1 + 1;
  }

  // bool fatigue_switch = 11;
  if (this->fatigue_switch() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Contrlinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Contrlinfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Contrlinfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Contrlinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Contrlinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Contrlinfo)
    MergeFrom(*source);
  }
}

void Contrlinfo::MergeFrom(const Contrlinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Contrlinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.license_url().size() > 0) {

    license_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.license_url_);
  }
  if (from.voice_position() != 0) {
    set_voice_position(from.voice_position());
  }
  if (from.emoji_type() != 0) {
    set_emoji_type(from.emoji_type());
  }
  if (from.emoji_time() != 0) {
    set_emoji_time(from.emoji_time());
  }
  if (from.turnangle() != 0) {
    set_turnangle(from.turnangle());
  }
  if (from.backlight() != 0) {
    set_backlight(from.backlight());
  }
  if (from.main_switch() != 0) {
    set_main_switch(from.main_switch());
  }
  if (from.face_recognition_switch() != 0) {
    set_face_recognition_switch(from.face_recognition_switch());
  }
  if (from.welcome_mode_switch() != 0) {
    set_welcome_mode_switch(from.welcome_mode_switch());
  }
  if (from.see_off_mode_switch() != 0) {
    set_see_off_mode_switch(from.see_off_mode_switch());
  }
  if (from.emotion_recognition_switch() != 0) {
    set_emotion_recognition_switch(from.emotion_recognition_switch());
  }
  if (from.fatigue_switch() != 0) {
    set_fatigue_switch(from.fatigue_switch());
  }
}

void Contrlinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Contrlinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contrlinfo::CopyFrom(const Contrlinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Contrlinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contrlinfo::IsInitialized() const {
  return true;
}

void Contrlinfo::Swap(Contrlinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Contrlinfo::InternalSwap(Contrlinfo* other) {
  uuid_.Swap(&other->uuid_);
  license_url_.Swap(&other->license_url_);
  std::swap(voice_position_, other->voice_position_);
  std::swap(emoji_type_, other->emoji_type_);
  std::swap(emoji_time_, other->emoji_time_);
  std::swap(turnangle_, other->turnangle_);
  std::swap(backlight_, other->backlight_);
  std::swap(main_switch_, other->main_switch_);
  std::swap(face_recognition_switch_, other->face_recognition_switch_);
  std::swap(welcome_mode_switch_, other->welcome_mode_switch_);
  std::swap(see_off_mode_switch_, other->see_off_mode_switch_);
  std::swap(emotion_recognition_switch_, other->emotion_recognition_switch_);
  std::swap(fatigue_switch_, other->fatigue_switch_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Contrlinfo::GetMetadata() const {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Contrlinfo

// int32 voice_position = 1;
void Contrlinfo::clear_voice_position() {
  voice_position_ = 0;
}
::google::protobuf::int32 Contrlinfo::voice_position() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.voice_position)
  return voice_position_;
}
void Contrlinfo::set_voice_position(::google::protobuf::int32 value) {
  
  voice_position_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.voice_position)
}

// .EMOJITYPE Emoji_type = 2;
void Contrlinfo::clear_emoji_type() {
  emoji_type_ = 0;
}
::EMOJITYPE Contrlinfo::emoji_type() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.Emoji_type)
  return static_cast< ::EMOJITYPE >(emoji_type_);
}
void Contrlinfo::set_emoji_type(::EMOJITYPE value) {
  
  emoji_type_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.Emoji_type)
}

// int32 Emoji_time = 3;
void Contrlinfo::clear_emoji_time() {
  emoji_time_ = 0;
}
::google::protobuf::int32 Contrlinfo::emoji_time() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.Emoji_time)
  return emoji_time_;
}
void Contrlinfo::set_emoji_time(::google::protobuf::int32 value) {
  
  emoji_time_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.Emoji_time)
}

// int32 turnAngle = 4;
void Contrlinfo::clear_turnangle() {
  turnangle_ = 0;
}
::google::protobuf::int32 Contrlinfo::turnangle() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.turnAngle)
  return turnangle_;
}
void Contrlinfo::set_turnangle(::google::protobuf::int32 value) {
  
  turnangle_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.turnAngle)
}

// int32 backlight = 5;
void Contrlinfo::clear_backlight() {
  backlight_ = 0;
}
::google::protobuf::int32 Contrlinfo::backlight() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.backlight)
  return backlight_;
}
void Contrlinfo::set_backlight(::google::protobuf::int32 value) {
  
  backlight_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.backlight)
}

// bool main_switch = 6;
void Contrlinfo::clear_main_switch() {
  main_switch_ = false;
}
bool Contrlinfo::main_switch() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.main_switch)
  return main_switch_;
}
void Contrlinfo::set_main_switch(bool value) {
  
  main_switch_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.main_switch)
}

// bool face_recognition_switch = 7;
void Contrlinfo::clear_face_recognition_switch() {
  face_recognition_switch_ = false;
}
bool Contrlinfo::face_recognition_switch() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.face_recognition_switch)
  return face_recognition_switch_;
}
void Contrlinfo::set_face_recognition_switch(bool value) {
  
  face_recognition_switch_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.face_recognition_switch)
}

// bool welcome_mode_switch = 8;
void Contrlinfo::clear_welcome_mode_switch() {
  welcome_mode_switch_ = false;
}
bool Contrlinfo::welcome_mode_switch() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.welcome_mode_switch)
  return welcome_mode_switch_;
}
void Contrlinfo::set_welcome_mode_switch(bool value) {
  
  welcome_mode_switch_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.welcome_mode_switch)
}

// bool see_off_mode_switch = 9;
void Contrlinfo::clear_see_off_mode_switch() {
  see_off_mode_switch_ = false;
}
bool Contrlinfo::see_off_mode_switch() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.see_off_mode_switch)
  return see_off_mode_switch_;
}
void Contrlinfo::set_see_off_mode_switch(bool value) {
  
  see_off_mode_switch_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.see_off_mode_switch)
}

// bool emotion_recognition_switch = 10;
void Contrlinfo::clear_emotion_recognition_switch() {
  emotion_recognition_switch_ = false;
}
bool Contrlinfo::emotion_recognition_switch() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.emotion_recognition_switch)
  return emotion_recognition_switch_;
}
void Contrlinfo::set_emotion_recognition_switch(bool value) {
  
  emotion_recognition_switch_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.emotion_recognition_switch)
}

// bool fatigue_switch = 11;
void Contrlinfo::clear_fatigue_switch() {
  fatigue_switch_ = false;
}
bool Contrlinfo::fatigue_switch() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.fatigue_switch)
  return fatigue_switch_;
}
void Contrlinfo::set_fatigue_switch(bool value) {
  
  fatigue_switch_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.fatigue_switch)
}

// string uuid = 12;
void Contrlinfo::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Contrlinfo::uuid() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.uuid)
  return uuid_.GetNoArena();
}
void Contrlinfo::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Contrlinfo.uuid)
}
#if LANG_CXX11
void Contrlinfo::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Contrlinfo.uuid)
}
#endif
void Contrlinfo::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Contrlinfo.uuid)
}
void Contrlinfo::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Contrlinfo.uuid)
}
::std::string* Contrlinfo::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:Contrlinfo.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Contrlinfo::release_uuid() {
  // @@protoc_insertion_point(field_release:Contrlinfo.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Contrlinfo::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:Contrlinfo.uuid)
}

// string license_url = 13;
void Contrlinfo::clear_license_url() {
  license_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Contrlinfo::license_url() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.license_url)
  return license_url_.GetNoArena();
}
void Contrlinfo::set_license_url(const ::std::string& value) {
  
  license_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Contrlinfo.license_url)
}
#if LANG_CXX11
void Contrlinfo::set_license_url(::std::string&& value) {
  
  license_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Contrlinfo.license_url)
}
#endif
void Contrlinfo::set_license_url(const char* value) {
  
  license_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Contrlinfo.license_url)
}
void Contrlinfo::set_license_url(const char* value, size_t size) {
  
  license_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Contrlinfo.license_url)
}
::std::string* Contrlinfo::mutable_license_url() {
  
  // @@protoc_insertion_point(field_mutable:Contrlinfo.license_url)
  return license_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Contrlinfo::release_license_url() {
  // @@protoc_insertion_point(field_release:Contrlinfo.license_url)
  
  return license_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Contrlinfo::set_allocated_license_url(::std::string* license_url) {
  if (license_url != NULL) {
    
  } else {
    
  }
  license_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), license_url);
  // @@protoc_insertion_point(field_set_allocated:Contrlinfo.license_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IHUContrl::kTypeFieldNumber;
const int IHUContrl::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IHUContrl::IHUContrl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_HU_5fIRS_5fv0_2e2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IHUContrl)
}
IHUContrl::IHUContrl(const IHUContrl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::Contrlinfo(*from.info_);
  } else {
    info_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:IHUContrl)
}

void IHUContrl::SharedCtor() {
  ::memset(&info_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&info_) + sizeof(type_));
  _cached_size_ = 0;
}

IHUContrl::~IHUContrl() {
  // @@protoc_insertion_point(destructor:IHUContrl)
  SharedDtor();
}

void IHUContrl::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void IHUContrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IHUContrl::descriptor() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_metadata[1].descriptor;
}

const IHUContrl& IHUContrl::default_instance() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::InitDefaults();
  return *internal_default_instance();
}

IHUContrl* IHUContrl::New(::google::protobuf::Arena* arena) const {
  IHUContrl* n = new IHUContrl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IHUContrl::Clear() {
// @@protoc_insertion_point(message_clear_start:IHUContrl)
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  type_ = 0;
}

bool IHUContrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IHUContrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Contrltype type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Contrltype >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Contrlinfo info = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IHUContrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IHUContrl)
  return false;
#undef DO_
}

void IHUContrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IHUContrl)
  // .Contrltype type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .Contrlinfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:IHUContrl)
}

::google::protobuf::uint8* IHUContrl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IHUContrl)
  // .Contrltype type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .Contrlinfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IHUContrl)
  return target;
}

size_t IHUContrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IHUContrl)
  size_t total_size = 0;

  // .Contrlinfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // .Contrltype type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IHUContrl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IHUContrl)
  GOOGLE_DCHECK_NE(&from, this);
  const IHUContrl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IHUContrl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IHUContrl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IHUContrl)
    MergeFrom(*source);
  }
}

void IHUContrl::MergeFrom(const IHUContrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IHUContrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    mutable_info()->::Contrlinfo::MergeFrom(from.info());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void IHUContrl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IHUContrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IHUContrl::CopyFrom(const IHUContrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IHUContrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IHUContrl::IsInitialized() const {
  return true;
}

void IHUContrl::Swap(IHUContrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IHUContrl::InternalSwap(IHUContrl* other) {
  std::swap(info_, other->info_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IHUContrl::GetMetadata() const {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IHUContrl

// .Contrltype type = 1;
void IHUContrl::clear_type() {
  type_ = 0;
}
::Contrltype IHUContrl::type() const {
  // @@protoc_insertion_point(field_get:IHUContrl.type)
  return static_cast< ::Contrltype >(type_);
}
void IHUContrl::set_type(::Contrltype value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:IHUContrl.type)
}

// .Contrlinfo info = 2;
bool IHUContrl::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void IHUContrl::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::Contrlinfo& IHUContrl::info() const {
  // @@protoc_insertion_point(field_get:IHUContrl.info)
  return info_ != NULL ? *info_
                         : *::Contrlinfo::internal_default_instance();
}
::Contrlinfo* IHUContrl::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::Contrlinfo;
  }
  // @@protoc_insertion_point(field_mutable:IHUContrl.info)
  return info_;
}
::Contrlinfo* IHUContrl::release_info() {
  // @@protoc_insertion_point(field_release:IHUContrl.info)
  
  ::Contrlinfo* temp = info_;
  info_ = NULL;
  return temp;
}
void IHUContrl::set_allocated_info(::Contrlinfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:IHUContrl.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespondInfo::kStatusFieldNumber;
const int RespondInfo::kFaceidFieldNumber;
const int RespondInfo::kEmotionFieldNumber;
const int RespondInfo::kFatigueFieldNumber;
const int RespondInfo::kMainSwitchFieldNumber;
const int RespondInfo::kFaceRecognitionSwitchFieldNumber;
const int RespondInfo::kWelcomeModeSwitchFieldNumber;
const int RespondInfo::kSeeOffModeSwitchFieldNumber;
const int RespondInfo::kEmotionRecognitionSwitchFieldNumber;
const int RespondInfo::kFatigueSwitchFieldNumber;
const int RespondInfo::kFailImageUrlFieldNumber;
const int RespondInfo::kVideoUrlFieldNumber;
const int RespondInfo::kPhotoUrlFieldNumber;
const int RespondInfo::kActivationCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespondInfo::RespondInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_HU_5fIRS_5fv0_2e2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RespondInfo)
}
RespondInfo::RespondInfo(const RespondInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fail_image_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fail_image_url().size() > 0) {
    fail_image_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fail_image_url_);
  }
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.video_url().size() > 0) {
    video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
  }
  photo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.photo_url().size() > 0) {
    photo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photo_url_);
  }
  activation_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.activation_code().size() > 0) {
    activation_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_code_);
  }
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&fatigue_switch_) -
    reinterpret_cast<char*>(&status_) + sizeof(fatigue_switch_));
  // @@protoc_insertion_point(copy_constructor:RespondInfo)
}

void RespondInfo::SharedCtor() {
  fail_image_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, reinterpret_cast<char*>(&fatigue_switch_) -
    reinterpret_cast<char*>(&status_) + sizeof(fatigue_switch_));
  _cached_size_ = 0;
}

RespondInfo::~RespondInfo() {
  // @@protoc_insertion_point(destructor:RespondInfo)
  SharedDtor();
}

void RespondInfo::SharedDtor() {
  fail_image_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RespondInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespondInfo::descriptor() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_metadata[2].descriptor;
}

const RespondInfo& RespondInfo::default_instance() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::InitDefaults();
  return *internal_default_instance();
}

RespondInfo* RespondInfo::New(::google::protobuf::Arena* arena) const {
  RespondInfo* n = new RespondInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RespondInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RespondInfo)
  fail_image_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, reinterpret_cast<char*>(&fatigue_switch_) -
    reinterpret_cast<char*>(&status_) + sizeof(fatigue_switch_));
}

bool RespondInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RespondInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 faceid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Driver_Emotion emotion = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_emotion(static_cast< ::Driver_Emotion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Driver_Fatigue fatigue = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fatigue(static_cast< ::Driver_Fatigue >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool main_switch = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &main_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool face_recognition_switch = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &face_recognition_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool welcome_mode_switch = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &welcome_mode_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool see_off_mode_switch = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &see_off_mode_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool emotion_recognition_switch = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emotion_recognition_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fatigue_switch = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fatigue_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fail_image_url = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_image_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fail_image_url().data(), this->fail_image_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RespondInfo.fail_image_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string video_url = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->video_url().data(), this->video_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RespondInfo.video_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string photo_url = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_photo_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->photo_url().data(), this->photo_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RespondInfo.photo_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string activation_code = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activation_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->activation_code().data(), this->activation_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RespondInfo.activation_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RespondInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RespondInfo)
  return false;
#undef DO_
}

void RespondInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RespondInfo)
  // int32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // int32 faceid = 2;
  if (this->faceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->faceid(), output);
  }

  // .Driver_Emotion emotion = 3;
  if (this->emotion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->emotion(), output);
  }

  // .Driver_Fatigue fatigue = 4;
  if (this->fatigue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->fatigue(), output);
  }

  // bool main_switch = 5;
  if (this->main_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->main_switch(), output);
  }

  // bool face_recognition_switch = 6;
  if (this->face_recognition_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->face_recognition_switch(), output);
  }

  // bool welcome_mode_switch = 7;
  if (this->welcome_mode_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->welcome_mode_switch(), output);
  }

  // bool see_off_mode_switch = 8;
  if (this->see_off_mode_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->see_off_mode_switch(), output);
  }

  // bool emotion_recognition_switch = 9;
  if (this->emotion_recognition_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->emotion_recognition_switch(), output);
  }

  // bool fatigue_switch = 10;
  if (this->fatigue_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->fatigue_switch(), output);
  }

  // string fail_image_url = 11;
  if (this->fail_image_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fail_image_url().data(), this->fail_image_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RespondInfo.fail_image_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->fail_image_url(), output);
  }

  // string video_url = 12;
  if (this->video_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->video_url().data(), this->video_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RespondInfo.video_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->video_url(), output);
  }

  // string photo_url = 13;
  if (this->photo_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photo_url().data(), this->photo_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RespondInfo.photo_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->photo_url(), output);
  }

  // string activation_code = 14;
  if (this->activation_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_code().data(), this->activation_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RespondInfo.activation_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->activation_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:RespondInfo)
}

::google::protobuf::uint8* RespondInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RespondInfo)
  // int32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // int32 faceid = 2;
  if (this->faceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->faceid(), target);
  }

  // .Driver_Emotion emotion = 3;
  if (this->emotion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->emotion(), target);
  }

  // .Driver_Fatigue fatigue = 4;
  if (this->fatigue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->fatigue(), target);
  }

  // bool main_switch = 5;
  if (this->main_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->main_switch(), target);
  }

  // bool face_recognition_switch = 6;
  if (this->face_recognition_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->face_recognition_switch(), target);
  }

  // bool welcome_mode_switch = 7;
  if (this->welcome_mode_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->welcome_mode_switch(), target);
  }

  // bool see_off_mode_switch = 8;
  if (this->see_off_mode_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->see_off_mode_switch(), target);
  }

  // bool emotion_recognition_switch = 9;
  if (this->emotion_recognition_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->emotion_recognition_switch(), target);
  }

  // bool fatigue_switch = 10;
  if (this->fatigue_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->fatigue_switch(), target);
  }

  // string fail_image_url = 11;
  if (this->fail_image_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fail_image_url().data(), this->fail_image_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RespondInfo.fail_image_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->fail_image_url(), target);
  }

  // string video_url = 12;
  if (this->video_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->video_url().data(), this->video_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RespondInfo.video_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->video_url(), target);
  }

  // string photo_url = 13;
  if (this->photo_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photo_url().data(), this->photo_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RespondInfo.photo_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->photo_url(), target);
  }

  // string activation_code = 14;
  if (this->activation_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_code().data(), this->activation_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RespondInfo.activation_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->activation_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RespondInfo)
  return target;
}

size_t RespondInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RespondInfo)
  size_t total_size = 0;

  // string fail_image_url = 11;
  if (this->fail_image_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fail_image_url());
  }

  // string video_url = 12;
  if (this->video_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->video_url());
  }

  // string photo_url = 13;
  if (this->photo_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->photo_url());
  }

  // string activation_code = 14;
  if (this->activation_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->activation_code());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // int32 faceid = 2;
  if (this->faceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->faceid());
  }

  // .Driver_Emotion emotion = 3;
  if (this->emotion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->emotion());
  }

  // .Driver_Fatigue fatigue = 4;
  if (this->fatigue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fatigue());
  }

  // bool main_switch = 5;
  if (this->main_switch() != 0) {
    total_size += 1 + 1;
  }

  // bool face_recognition_switch = 6;
  if (this->face_recognition_switch() != 0) {
    total_size += 1 + 1;
  }

  // bool welcome_mode_switch = 7;
  if (this->welcome_mode_switch() != 0) {
    total_size += 1 + 1;
  }

  // bool see_off_mode_switch = 8;
  if (this->see_off_mode_switch() != 0) {
    total_size += 1 + 1;
  }

  // bool emotion_recognition_switch = 9;
  if (this->emotion_recognition_switch() != 0) {
    total_size += 1 + 1;
  }

  // bool fatigue_switch = 10;
  if (this->fatigue_switch() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespondInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RespondInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RespondInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RespondInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RespondInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RespondInfo)
    MergeFrom(*source);
  }
}

void RespondInfo::MergeFrom(const RespondInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RespondInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.fail_image_url().size() > 0) {

    fail_image_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fail_image_url_);
  }
  if (from.video_url().size() > 0) {

    video_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_url_);
  }
  if (from.photo_url().size() > 0) {

    photo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photo_url_);
  }
  if (from.activation_code().size() > 0) {

    activation_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_code_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.faceid() != 0) {
    set_faceid(from.faceid());
  }
  if (from.emotion() != 0) {
    set_emotion(from.emotion());
  }
  if (from.fatigue() != 0) {
    set_fatigue(from.fatigue());
  }
  if (from.main_switch() != 0) {
    set_main_switch(from.main_switch());
  }
  if (from.face_recognition_switch() != 0) {
    set_face_recognition_switch(from.face_recognition_switch());
  }
  if (from.welcome_mode_switch() != 0) {
    set_welcome_mode_switch(from.welcome_mode_switch());
  }
  if (from.see_off_mode_switch() != 0) {
    set_see_off_mode_switch(from.see_off_mode_switch());
  }
  if (from.emotion_recognition_switch() != 0) {
    set_emotion_recognition_switch(from.emotion_recognition_switch());
  }
  if (from.fatigue_switch() != 0) {
    set_fatigue_switch(from.fatigue_switch());
  }
}

void RespondInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RespondInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespondInfo::CopyFrom(const RespondInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RespondInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespondInfo::IsInitialized() const {
  return true;
}

void RespondInfo::Swap(RespondInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespondInfo::InternalSwap(RespondInfo* other) {
  fail_image_url_.Swap(&other->fail_image_url_);
  video_url_.Swap(&other->video_url_);
  photo_url_.Swap(&other->photo_url_);
  activation_code_.Swap(&other->activation_code_);
  std::swap(status_, other->status_);
  std::swap(faceid_, other->faceid_);
  std::swap(emotion_, other->emotion_);
  std::swap(fatigue_, other->fatigue_);
  std::swap(main_switch_, other->main_switch_);
  std::swap(face_recognition_switch_, other->face_recognition_switch_);
  std::swap(welcome_mode_switch_, other->welcome_mode_switch_);
  std::swap(see_off_mode_switch_, other->see_off_mode_switch_);
  std::swap(emotion_recognition_switch_, other->emotion_recognition_switch_);
  std::swap(fatigue_switch_, other->fatigue_switch_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RespondInfo::GetMetadata() const {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RespondInfo

// int32 status = 1;
void RespondInfo::clear_status() {
  status_ = 0;
}
::google::protobuf::int32 RespondInfo::status() const {
  // @@protoc_insertion_point(field_get:RespondInfo.status)
  return status_;
}
void RespondInfo::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.status)
}

// int32 faceid = 2;
void RespondInfo::clear_faceid() {
  faceid_ = 0;
}
::google::protobuf::int32 RespondInfo::faceid() const {
  // @@protoc_insertion_point(field_get:RespondInfo.faceid)
  return faceid_;
}
void RespondInfo::set_faceid(::google::protobuf::int32 value) {
  
  faceid_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.faceid)
}

// .Driver_Emotion emotion = 3;
void RespondInfo::clear_emotion() {
  emotion_ = 0;
}
::Driver_Emotion RespondInfo::emotion() const {
  // @@protoc_insertion_point(field_get:RespondInfo.emotion)
  return static_cast< ::Driver_Emotion >(emotion_);
}
void RespondInfo::set_emotion(::Driver_Emotion value) {
  
  emotion_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.emotion)
}

// .Driver_Fatigue fatigue = 4;
void RespondInfo::clear_fatigue() {
  fatigue_ = 0;
}
::Driver_Fatigue RespondInfo::fatigue() const {
  // @@protoc_insertion_point(field_get:RespondInfo.fatigue)
  return static_cast< ::Driver_Fatigue >(fatigue_);
}
void RespondInfo::set_fatigue(::Driver_Fatigue value) {
  
  fatigue_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.fatigue)
}

// bool main_switch = 5;
void RespondInfo::clear_main_switch() {
  main_switch_ = false;
}
bool RespondInfo::main_switch() const {
  // @@protoc_insertion_point(field_get:RespondInfo.main_switch)
  return main_switch_;
}
void RespondInfo::set_main_switch(bool value) {
  
  main_switch_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.main_switch)
}

// bool face_recognition_switch = 6;
void RespondInfo::clear_face_recognition_switch() {
  face_recognition_switch_ = false;
}
bool RespondInfo::face_recognition_switch() const {
  // @@protoc_insertion_point(field_get:RespondInfo.face_recognition_switch)
  return face_recognition_switch_;
}
void RespondInfo::set_face_recognition_switch(bool value) {
  
  face_recognition_switch_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.face_recognition_switch)
}

// bool welcome_mode_switch = 7;
void RespondInfo::clear_welcome_mode_switch() {
  welcome_mode_switch_ = false;
}
bool RespondInfo::welcome_mode_switch() const {
  // @@protoc_insertion_point(field_get:RespondInfo.welcome_mode_switch)
  return welcome_mode_switch_;
}
void RespondInfo::set_welcome_mode_switch(bool value) {
  
  welcome_mode_switch_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.welcome_mode_switch)
}

// bool see_off_mode_switch = 8;
void RespondInfo::clear_see_off_mode_switch() {
  see_off_mode_switch_ = false;
}
bool RespondInfo::see_off_mode_switch() const {
  // @@protoc_insertion_point(field_get:RespondInfo.see_off_mode_switch)
  return see_off_mode_switch_;
}
void RespondInfo::set_see_off_mode_switch(bool value) {
  
  see_off_mode_switch_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.see_off_mode_switch)
}

// bool emotion_recognition_switch = 9;
void RespondInfo::clear_emotion_recognition_switch() {
  emotion_recognition_switch_ = false;
}
bool RespondInfo::emotion_recognition_switch() const {
  // @@protoc_insertion_point(field_get:RespondInfo.emotion_recognition_switch)
  return emotion_recognition_switch_;
}
void RespondInfo::set_emotion_recognition_switch(bool value) {
  
  emotion_recognition_switch_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.emotion_recognition_switch)
}

// bool fatigue_switch = 10;
void RespondInfo::clear_fatigue_switch() {
  fatigue_switch_ = false;
}
bool RespondInfo::fatigue_switch() const {
  // @@protoc_insertion_point(field_get:RespondInfo.fatigue_switch)
  return fatigue_switch_;
}
void RespondInfo::set_fatigue_switch(bool value) {
  
  fatigue_switch_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.fatigue_switch)
}

// string fail_image_url = 11;
void RespondInfo::clear_fail_image_url() {
  fail_image_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RespondInfo::fail_image_url() const {
  // @@protoc_insertion_point(field_get:RespondInfo.fail_image_url)
  return fail_image_url_.GetNoArena();
}
void RespondInfo::set_fail_image_url(const ::std::string& value) {
  
  fail_image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RespondInfo.fail_image_url)
}
#if LANG_CXX11
void RespondInfo::set_fail_image_url(::std::string&& value) {
  
  fail_image_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RespondInfo.fail_image_url)
}
#endif
void RespondInfo::set_fail_image_url(const char* value) {
  
  fail_image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RespondInfo.fail_image_url)
}
void RespondInfo::set_fail_image_url(const char* value, size_t size) {
  
  fail_image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RespondInfo.fail_image_url)
}
::std::string* RespondInfo::mutable_fail_image_url() {
  
  // @@protoc_insertion_point(field_mutable:RespondInfo.fail_image_url)
  return fail_image_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RespondInfo::release_fail_image_url() {
  // @@protoc_insertion_point(field_release:RespondInfo.fail_image_url)
  
  return fail_image_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RespondInfo::set_allocated_fail_image_url(::std::string* fail_image_url) {
  if (fail_image_url != NULL) {
    
  } else {
    
  }
  fail_image_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fail_image_url);
  // @@protoc_insertion_point(field_set_allocated:RespondInfo.fail_image_url)
}

// string video_url = 12;
void RespondInfo::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RespondInfo::video_url() const {
  // @@protoc_insertion_point(field_get:RespondInfo.video_url)
  return video_url_.GetNoArena();
}
void RespondInfo::set_video_url(const ::std::string& value) {
  
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RespondInfo.video_url)
}
#if LANG_CXX11
void RespondInfo::set_video_url(::std::string&& value) {
  
  video_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RespondInfo.video_url)
}
#endif
void RespondInfo::set_video_url(const char* value) {
  
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RespondInfo.video_url)
}
void RespondInfo::set_video_url(const char* value, size_t size) {
  
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RespondInfo.video_url)
}
::std::string* RespondInfo::mutable_video_url() {
  
  // @@protoc_insertion_point(field_mutable:RespondInfo.video_url)
  return video_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RespondInfo::release_video_url() {
  // @@protoc_insertion_point(field_release:RespondInfo.video_url)
  
  return video_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RespondInfo::set_allocated_video_url(::std::string* video_url) {
  if (video_url != NULL) {
    
  } else {
    
  }
  video_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:RespondInfo.video_url)
}

// string photo_url = 13;
void RespondInfo::clear_photo_url() {
  photo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RespondInfo::photo_url() const {
  // @@protoc_insertion_point(field_get:RespondInfo.photo_url)
  return photo_url_.GetNoArena();
}
void RespondInfo::set_photo_url(const ::std::string& value) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RespondInfo.photo_url)
}
#if LANG_CXX11
void RespondInfo::set_photo_url(::std::string&& value) {
  
  photo_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RespondInfo.photo_url)
}
#endif
void RespondInfo::set_photo_url(const char* value) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RespondInfo.photo_url)
}
void RespondInfo::set_photo_url(const char* value, size_t size) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RespondInfo.photo_url)
}
::std::string* RespondInfo::mutable_photo_url() {
  
  // @@protoc_insertion_point(field_mutable:RespondInfo.photo_url)
  return photo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RespondInfo::release_photo_url() {
  // @@protoc_insertion_point(field_release:RespondInfo.photo_url)
  
  return photo_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RespondInfo::set_allocated_photo_url(::std::string* photo_url) {
  if (photo_url != NULL) {
    
  } else {
    
  }
  photo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo_url);
  // @@protoc_insertion_point(field_set_allocated:RespondInfo.photo_url)
}

// string activation_code = 14;
void RespondInfo::clear_activation_code() {
  activation_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RespondInfo::activation_code() const {
  // @@protoc_insertion_point(field_get:RespondInfo.activation_code)
  return activation_code_.GetNoArena();
}
void RespondInfo::set_activation_code(const ::std::string& value) {
  
  activation_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RespondInfo.activation_code)
}
#if LANG_CXX11
void RespondInfo::set_activation_code(::std::string&& value) {
  
  activation_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RespondInfo.activation_code)
}
#endif
void RespondInfo::set_activation_code(const char* value) {
  
  activation_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RespondInfo.activation_code)
}
void RespondInfo::set_activation_code(const char* value, size_t size) {
  
  activation_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RespondInfo.activation_code)
}
::std::string* RespondInfo::mutable_activation_code() {
  
  // @@protoc_insertion_point(field_mutable:RespondInfo.activation_code)
  return activation_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RespondInfo::release_activation_code() {
  // @@protoc_insertion_point(field_release:RespondInfo.activation_code)
  
  return activation_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RespondInfo::set_allocated_activation_code(::std::string* activation_code) {
  if (activation_code != NULL) {
    
  } else {
    
  }
  activation_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activation_code);
  // @@protoc_insertion_point(field_set_allocated:RespondInfo.activation_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IRSRespond::kTypeFieldNumber;
const int IRSRespond::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IRSRespond::IRSRespond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_HU_5fIRS_5fv0_2e2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IRSRespond)
}
IRSRespond::IRSRespond(const IRSRespond& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::RespondInfo(*from.result_);
  } else {
    result_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:IRSRespond)
}

void IRSRespond::SharedCtor() {
  ::memset(&result_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&result_) + sizeof(type_));
  _cached_size_ = 0;
}

IRSRespond::~IRSRespond() {
  // @@protoc_insertion_point(destructor:IRSRespond)
  SharedDtor();
}

void IRSRespond::SharedDtor() {
  if (this != internal_default_instance()) {
    delete result_;
  }
}

void IRSRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IRSRespond::descriptor() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_metadata[3].descriptor;
}

const IRSRespond& IRSRespond::default_instance() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::InitDefaults();
  return *internal_default_instance();
}

IRSRespond* IRSRespond::New(::google::protobuf::Arena* arena) const {
  IRSRespond* n = new IRSRespond;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IRSRespond::Clear() {
// @@protoc_insertion_point(message_clear_start:IRSRespond)
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
  type_ = 0;
}

bool IRSRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IRSRespond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RespondType type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::RespondType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RespondInfo result = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IRSRespond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IRSRespond)
  return false;
#undef DO_
}

void IRSRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IRSRespond)
  // .RespondType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .RespondInfo result = 2;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->result_, output);
  }

  // @@protoc_insertion_point(serialize_end:IRSRespond)
}

::google::protobuf::uint8* IRSRespond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IRSRespond)
  // .RespondType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .RespondInfo result = 2;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->result_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IRSRespond)
  return target;
}

size_t IRSRespond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IRSRespond)
  size_t total_size = 0;

  // .RespondInfo result = 2;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  // .RespondType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IRSRespond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IRSRespond)
  GOOGLE_DCHECK_NE(&from, this);
  const IRSRespond* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IRSRespond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IRSRespond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IRSRespond)
    MergeFrom(*source);
  }
}

void IRSRespond::MergeFrom(const IRSRespond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IRSRespond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    mutable_result()->::RespondInfo::MergeFrom(from.result());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void IRSRespond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IRSRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRSRespond::CopyFrom(const IRSRespond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IRSRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRSRespond::IsInitialized() const {
  return true;
}

void IRSRespond::Swap(IRSRespond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IRSRespond::InternalSwap(IRSRespond* other) {
  std::swap(result_, other->result_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IRSRespond::GetMetadata() const {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IRSRespond

// .RespondType type = 1;
void IRSRespond::clear_type() {
  type_ = 0;
}
::RespondType IRSRespond::type() const {
  // @@protoc_insertion_point(field_get:IRSRespond.type)
  return static_cast< ::RespondType >(type_);
}
void IRSRespond::set_type(::RespondType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:IRSRespond.type)
}

// .RespondInfo result = 2;
bool IRSRespond::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
void IRSRespond::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
const ::RespondInfo& IRSRespond::result() const {
  // @@protoc_insertion_point(field_get:IRSRespond.result)
  return result_ != NULL ? *result_
                         : *::RespondInfo::internal_default_instance();
}
::RespondInfo* IRSRespond::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::RespondInfo;
  }
  // @@protoc_insertion_point(field_mutable:IRSRespond.result)
  return result_;
}
::RespondInfo* IRSRespond::release_result() {
  // @@protoc_insertion_point(field_release:IRSRespond.result)
  
  ::RespondInfo* temp = result_;
  result_ = NULL;
  return temp;
}
void IRSRespond::set_allocated_result(::RespondInfo* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:IRSRespond.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgResult::kResultFieldNumber;
const int MsgResult::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgResult::MsgResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_HU_5fIRS_5fv0_2e2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgResult)
}
MsgResult::MsgResult(const MsgResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_code().size() > 0) {
    error_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_code_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:MsgResult)
}

void MsgResult::SharedCtor() {
  error_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = false;
  _cached_size_ = 0;
}

MsgResult::~MsgResult() {
  // @@protoc_insertion_point(destructor:MsgResult)
  SharedDtor();
}

void MsgResult::SharedDtor() {
  error_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MsgResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgResult::descriptor() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_metadata[4].descriptor;
}

const MsgResult& MsgResult::default_instance() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgResult* MsgResult::New(::google::protobuf::Arena* arena) const {
  MsgResult* n = new MsgResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgResult::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgResult)
  error_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = false;
}

bool MsgResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool result = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes error_code = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgResult)
  return false;
#undef DO_
}

void MsgResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgResult)
  // bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // bytes error_code = 2;
  if (this->error_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->error_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:MsgResult)
}

::google::protobuf::uint8* MsgResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MsgResult)
  // bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // bytes error_code = 2;
  if (this->error_code().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->error_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MsgResult)
  return target;
}

size_t MsgResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgResult)
  size_t total_size = 0;

  // bytes error_code = 2;
  if (this->error_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->error_code());
  }

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgResult)
    MergeFrom(*source);
  }
}

void MsgResult::MergeFrom(const MsgResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.error_code().size() > 0) {

    error_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_code_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgResult::CopyFrom(const MsgResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgResult::IsInitialized() const {
  return true;
}

void MsgResult::Swap(MsgResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgResult::InternalSwap(MsgResult* other) {
  error_code_.Swap(&other->error_code_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgResult::GetMetadata() const {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgResult

// bool result = 1;
void MsgResult::clear_result() {
  result_ = false;
}
bool MsgResult::result() const {
  // @@protoc_insertion_point(field_get:MsgResult.result)
  return result_;
}
void MsgResult::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:MsgResult.result)
}

// bytes error_code = 2;
void MsgResult::clear_error_code() {
  error_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgResult::error_code() const {
  // @@protoc_insertion_point(field_get:MsgResult.error_code)
  return error_code_.GetNoArena();
}
void MsgResult::set_error_code(const ::std::string& value) {
  
  error_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MsgResult.error_code)
}
#if LANG_CXX11
void MsgResult::set_error_code(::std::string&& value) {
  
  error_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MsgResult.error_code)
}
#endif
void MsgResult::set_error_code(const char* value) {
  
  error_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MsgResult.error_code)
}
void MsgResult::set_error_code(const void* value, size_t size) {
  
  error_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MsgResult.error_code)
}
::std::string* MsgResult::mutable_error_code() {
  
  // @@protoc_insertion_point(field_mutable:MsgResult.error_code)
  return error_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgResult::release_error_code() {
  // @@protoc_insertion_point(field_release:MsgResult.error_code)
  
  return error_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgResult::set_allocated_error_code(::std::string* error_code) {
  if (error_code != NULL) {
    
  } else {
    
  }
  error_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_code);
  // @@protoc_insertion_point(field_set_allocated:MsgResult.error_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopMessage::kMessageTypeFieldNumber;
const int TopMessage::kIHUCtrlFieldNumber;
const int TopMessage::kIRSReturnFieldNumber;
const int TopMessage::kMsgResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopMessage::TopMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_HU_5fIRS_5fv0_2e2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TopMessage)
}
TopMessage::TopMessage(const TopMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ihu_ctrl()) {
    ihu_ctrl_ = new ::IHUContrl(*from.ihu_ctrl_);
  } else {
    ihu_ctrl_ = NULL;
  }
  if (from.has_irs_return()) {
    irs_return_ = new ::IRSRespond(*from.irs_return_);
  } else {
    irs_return_ = NULL;
  }
  if (from.has_msg_result()) {
    msg_result_ = new ::MsgResult(*from.msg_result_);
  } else {
    msg_result_ = NULL;
  }
  message_type_ = from.message_type_;
  // @@protoc_insertion_point(copy_constructor:TopMessage)
}

void TopMessage::SharedCtor() {
  ::memset(&ihu_ctrl_, 0, reinterpret_cast<char*>(&message_type_) -
    reinterpret_cast<char*>(&ihu_ctrl_) + sizeof(message_type_));
  _cached_size_ = 0;
}

TopMessage::~TopMessage() {
  // @@protoc_insertion_point(destructor:TopMessage)
  SharedDtor();
}

void TopMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ihu_ctrl_;
  }
  if (this != internal_default_instance()) {
    delete irs_return_;
  }
  if (this != internal_default_instance()) {
    delete msg_result_;
  }
}

void TopMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopMessage::descriptor() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_metadata[5].descriptor;
}

const TopMessage& TopMessage::default_instance() {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::InitDefaults();
  return *internal_default_instance();
}

TopMessage* TopMessage::New(::google::protobuf::Arena* arena) const {
  TopMessage* n = new TopMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TopMessage)
  if (GetArenaNoVirtual() == NULL && ihu_ctrl_ != NULL) {
    delete ihu_ctrl_;
  }
  ihu_ctrl_ = NULL;
  if (GetArenaNoVirtual() == NULL && irs_return_ != NULL) {
    delete irs_return_;
  }
  irs_return_ = NULL;
  if (GetArenaNoVirtual() == NULL && msg_result_ != NULL) {
    delete msg_result_;
  }
  msg_result_ = NULL;
  message_type_ = 0;
}

bool TopMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TopMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Messagetype message_type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_message_type(static_cast< ::Messagetype >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IHUContrl IHU_ctrl = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ihu_ctrl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IRSRespond IRS_Return = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_irs_return()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MsgResult msg_result = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TopMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TopMessage)
  return false;
#undef DO_
}

void TopMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TopMessage)
  // .Messagetype message_type = 1;
  if (this->message_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_type(), output);
  }

  // .IHUContrl IHU_ctrl = 2;
  if (this->has_ihu_ctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ihu_ctrl_, output);
  }

  // .IRSRespond IRS_Return = 3;
  if (this->has_irs_return()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->irs_return_, output);
  }

  // .MsgResult msg_result = 4;
  if (this->has_msg_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->msg_result_, output);
  }

  // @@protoc_insertion_point(serialize_end:TopMessage)
}

::google::protobuf::uint8* TopMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TopMessage)
  // .Messagetype message_type = 1;
  if (this->message_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->message_type(), target);
  }

  // .IHUContrl IHU_ctrl = 2;
  if (this->has_ihu_ctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ihu_ctrl_, false, target);
  }

  // .IRSRespond IRS_Return = 3;
  if (this->has_irs_return()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->irs_return_, false, target);
  }

  // .MsgResult msg_result = 4;
  if (this->has_msg_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->msg_result_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TopMessage)
  return target;
}

size_t TopMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TopMessage)
  size_t total_size = 0;

  // .IHUContrl IHU_ctrl = 2;
  if (this->has_ihu_ctrl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ihu_ctrl_);
  }

  // .IRSRespond IRS_Return = 3;
  if (this->has_irs_return()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->irs_return_);
  }

  // .MsgResult msg_result = 4;
  if (this->has_msg_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_result_);
  }

  // .Messagetype message_type = 1;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TopMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TopMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TopMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TopMessage)
    MergeFrom(*source);
  }
}

void TopMessage::MergeFrom(const TopMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TopMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ihu_ctrl()) {
    mutable_ihu_ctrl()->::IHUContrl::MergeFrom(from.ihu_ctrl());
  }
  if (from.has_irs_return()) {
    mutable_irs_return()->::IRSRespond::MergeFrom(from.irs_return());
  }
  if (from.has_msg_result()) {
    mutable_msg_result()->::MsgResult::MergeFrom(from.msg_result());
  }
  if (from.message_type() != 0) {
    set_message_type(from.message_type());
  }
}

void TopMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TopMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopMessage::CopyFrom(const TopMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TopMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopMessage::IsInitialized() const {
  return true;
}

void TopMessage::Swap(TopMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopMessage::InternalSwap(TopMessage* other) {
  std::swap(ihu_ctrl_, other->ihu_ctrl_);
  std::swap(irs_return_, other->irs_return_);
  std::swap(msg_result_, other->msg_result_);
  std::swap(message_type_, other->message_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopMessage::GetMetadata() const {
  protobuf_HU_5fIRS_5fv0_2e2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_HU_5fIRS_5fv0_2e2_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopMessage

// .Messagetype message_type = 1;
void TopMessage::clear_message_type() {
  message_type_ = 0;
}
::Messagetype TopMessage::message_type() const {
  // @@protoc_insertion_point(field_get:TopMessage.message_type)
  return static_cast< ::Messagetype >(message_type_);
}
void TopMessage::set_message_type(::Messagetype value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:TopMessage.message_type)
}

// .IHUContrl IHU_ctrl = 2;
bool TopMessage::has_ihu_ctrl() const {
  return this != internal_default_instance() && ihu_ctrl_ != NULL;
}
void TopMessage::clear_ihu_ctrl() {
  if (GetArenaNoVirtual() == NULL && ihu_ctrl_ != NULL) delete ihu_ctrl_;
  ihu_ctrl_ = NULL;
}
const ::IHUContrl& TopMessage::ihu_ctrl() const {
  // @@protoc_insertion_point(field_get:TopMessage.IHU_ctrl)
  return ihu_ctrl_ != NULL ? *ihu_ctrl_
                         : *::IHUContrl::internal_default_instance();
}
::IHUContrl* TopMessage::mutable_ihu_ctrl() {
  
  if (ihu_ctrl_ == NULL) {
    ihu_ctrl_ = new ::IHUContrl;
  }
  // @@protoc_insertion_point(field_mutable:TopMessage.IHU_ctrl)
  return ihu_ctrl_;
}
::IHUContrl* TopMessage::release_ihu_ctrl() {
  // @@protoc_insertion_point(field_release:TopMessage.IHU_ctrl)
  
  ::IHUContrl* temp = ihu_ctrl_;
  ihu_ctrl_ = NULL;
  return temp;
}
void TopMessage::set_allocated_ihu_ctrl(::IHUContrl* ihu_ctrl) {
  delete ihu_ctrl_;
  ihu_ctrl_ = ihu_ctrl;
  if (ihu_ctrl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:TopMessage.IHU_ctrl)
}

// .IRSRespond IRS_Return = 3;
bool TopMessage::has_irs_return() const {
  return this != internal_default_instance() && irs_return_ != NULL;
}
void TopMessage::clear_irs_return() {
  if (GetArenaNoVirtual() == NULL && irs_return_ != NULL) delete irs_return_;
  irs_return_ = NULL;
}
const ::IRSRespond& TopMessage::irs_return() const {
  // @@protoc_insertion_point(field_get:TopMessage.IRS_Return)
  return irs_return_ != NULL ? *irs_return_
                         : *::IRSRespond::internal_default_instance();
}
::IRSRespond* TopMessage::mutable_irs_return() {
  
  if (irs_return_ == NULL) {
    irs_return_ = new ::IRSRespond;
  }
  // @@protoc_insertion_point(field_mutable:TopMessage.IRS_Return)
  return irs_return_;
}
::IRSRespond* TopMessage::release_irs_return() {
  // @@protoc_insertion_point(field_release:TopMessage.IRS_Return)
  
  ::IRSRespond* temp = irs_return_;
  irs_return_ = NULL;
  return temp;
}
void TopMessage::set_allocated_irs_return(::IRSRespond* irs_return) {
  delete irs_return_;
  irs_return_ = irs_return;
  if (irs_return) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:TopMessage.IRS_Return)
}

// .MsgResult msg_result = 4;
bool TopMessage::has_msg_result() const {
  return this != internal_default_instance() && msg_result_ != NULL;
}
void TopMessage::clear_msg_result() {
  if (GetArenaNoVirtual() == NULL && msg_result_ != NULL) delete msg_result_;
  msg_result_ = NULL;
}
const ::MsgResult& TopMessage::msg_result() const {
  // @@protoc_insertion_point(field_get:TopMessage.msg_result)
  return msg_result_ != NULL ? *msg_result_
                         : *::MsgResult::internal_default_instance();
}
::MsgResult* TopMessage::mutable_msg_result() {
  
  if (msg_result_ == NULL) {
    msg_result_ = new ::MsgResult;
  }
  // @@protoc_insertion_point(field_mutable:TopMessage.msg_result)
  return msg_result_;
}
::MsgResult* TopMessage::release_msg_result() {
  // @@protoc_insertion_point(field_release:TopMessage.msg_result)
  
  ::MsgResult* temp = msg_result_;
  msg_result_ = NULL;
  return temp;
}
void TopMessage::set_allocated_msg_result(::MsgResult* msg_result) {
  delete msg_result_;
  msg_result_ = msg_result;
  if (msg_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:TopMessage.msg_result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
