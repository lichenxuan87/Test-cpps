// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HU_IRS_v0.2.proto

#ifndef PROTOBUF_HU_5fIRS_5fv0_2e2_2eproto__INCLUDED
#define PROTOBUF_HU_5fIRS_5fv0_2e2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class Contrlinfo;
class ContrlinfoDefaultTypeInternal;
extern ContrlinfoDefaultTypeInternal _Contrlinfo_default_instance_;
class IHUContrl;
class IHUContrlDefaultTypeInternal;
extern IHUContrlDefaultTypeInternal _IHUContrl_default_instance_;
class IRSRespond;
class IRSRespondDefaultTypeInternal;
extern IRSRespondDefaultTypeInternal _IRSRespond_default_instance_;
class MsgResult;
class MsgResultDefaultTypeInternal;
extern MsgResultDefaultTypeInternal _MsgResult_default_instance_;
class RespondInfo;
class RespondInfoDefaultTypeInternal;
extern RespondInfoDefaultTypeInternal _RespondInfo_default_instance_;
class TopMessage;
class TopMessageDefaultTypeInternal;
extern TopMessageDefaultTypeInternal _TopMessage_default_instance_;

namespace protobuf_HU_5fIRS_5fv0_2e2_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_HU_5fIRS_5fv0_2e2_2eproto

enum Messagetype {
  REQUEST_RESPONSE_NONE = 0,
  REQUEST_HEARTBEAT_SIGNAL = 1,
  RESPONSE_HEARTBEAT_RESULT = 2,
  REQUEST_CHANGE_SETTINGS = 3,
  RESPONSE_CHANGE_SETTINGS = 4,
  REQUEST_GET_SETTINGS = 5,
  RESPONSE_GET_SETTINGS = 6,
  REQUEST_FACE_IDENTIFY = 7,
  RESPONSE_FACE_IDENTIFY = 8,
  REQUEST_IRS_ACTION = 9,
  RESPONSE_IRS_ACTION = 10,
  REQUEST_WELCOME_MODE = 11,
  RESPONSE_WELCOME_MODE = 12,
  REQUEST_SEE_OFF_MODE = 13,
  RESPONSE_SEE_OFF_MODE = 14,
  REQUEST_FACEINFO_ADD = 15,
  RESPONSE_FACEINFO_ADD = 16,
  REQUEST_FACEINFO_DEL = 17,
  RESPONSE_FACEINFO_DEL = 18,
  RESPONSE_EMOTION = 19,
  RESPONSE_FATIGUER = 20,
  REQUEST_BACKLIGHTSET = 21,
  RESPONSE_BACKLIGHTSET = 22,
  REQUEST_RECORD_VIDEO_CTRL = 23,
  RESPONSE_RECORD_VIDEO_CTRL = 24,
  REQUEST_GET_PICTURE_CTRL = 25,
  RESPONSE_GET_PICTURE_CTRL = 26,
  Messagetype_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Messagetype_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Messagetype_IsValid(int value);
const Messagetype Messagetype_MIN = REQUEST_RESPONSE_NONE;
const Messagetype Messagetype_MAX = RESPONSE_GET_PICTURE_CTRL;
const int Messagetype_ARRAYSIZE = Messagetype_MAX + 1;

const ::google::protobuf::EnumDescriptor* Messagetype_descriptor();
inline const ::std::string& Messagetype_Name(Messagetype value) {
  return ::google::protobuf::internal::NameOfEnum(
    Messagetype_descriptor(), value);
}
inline bool Messagetype_Parse(
    const ::std::string& name, Messagetype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Messagetype>(
    Messagetype_descriptor(), name, value);
}
enum Contrltype {
  Contrltype_START = 0,
  Contrltype_STOP = 1,
  Contrltype_PAUSE = 2,
  Contrltype_CONTINUE = 3,
  Contrltype_GET = 4,
  Contrltype_SET = 5,
  Contrltype_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Contrltype_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Contrltype_IsValid(int value);
const Contrltype Contrltype_MIN = Contrltype_START;
const Contrltype Contrltype_MAX = Contrltype_SET;
const int Contrltype_ARRAYSIZE = Contrltype_MAX + 1;

const ::google::protobuf::EnumDescriptor* Contrltype_descriptor();
inline const ::std::string& Contrltype_Name(Contrltype value) {
  return ::google::protobuf::internal::NameOfEnum(
    Contrltype_descriptor(), value);
}
inline bool Contrltype_Parse(
    const ::std::string& name, Contrltype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Contrltype>(
    Contrltype_descriptor(), name, value);
}
enum Driver_Emotion {
  NORMAL_Emotion = 0,
  HAPPY = 1,
  ANGRY = 2,
  Driver_Emotion_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Driver_Emotion_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Driver_Emotion_IsValid(int value);
const Driver_Emotion Driver_Emotion_MIN = NORMAL_Emotion;
const Driver_Emotion Driver_Emotion_MAX = ANGRY;
const int Driver_Emotion_ARRAYSIZE = Driver_Emotion_MAX + 1;

const ::google::protobuf::EnumDescriptor* Driver_Emotion_descriptor();
inline const ::std::string& Driver_Emotion_Name(Driver_Emotion value) {
  return ::google::protobuf::internal::NameOfEnum(
    Driver_Emotion_descriptor(), value);
}
inline bool Driver_Emotion_Parse(
    const ::std::string& name, Driver_Emotion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Driver_Emotion>(
    Driver_Emotion_descriptor(), name, value);
}
enum Driver_Fatigue {
  NORMAL_Fatigue = 0,
  LOW = 1,
  MIDDLE = 2,
  HIGH = 3,
  Driver_Fatigue_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Driver_Fatigue_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Driver_Fatigue_IsValid(int value);
const Driver_Fatigue Driver_Fatigue_MIN = NORMAL_Fatigue;
const Driver_Fatigue Driver_Fatigue_MAX = HIGH;
const int Driver_Fatigue_ARRAYSIZE = Driver_Fatigue_MAX + 1;

const ::google::protobuf::EnumDescriptor* Driver_Fatigue_descriptor();
inline const ::std::string& Driver_Fatigue_Name(Driver_Fatigue value) {
  return ::google::protobuf::internal::NameOfEnum(
    Driver_Fatigue_descriptor(), value);
}
inline bool Driver_Fatigue_Parse(
    const ::std::string& name, Driver_Fatigue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Driver_Fatigue>(
    Driver_Fatigue_descriptor(), name, value);
}
enum EMOJITYPE {
  SMILE = 0,
  LAUGH = 1,
  BIG_EYES = 2,
  SQUINT = 3,
  BLINK = 4,
  SWEATING = 5,
  COLD_SWEAT = 6,
  RUN = 7,
  JUMP = 8,
  THINK = 30,
  NOD = 60,
  SHAKE = 61,
  UP_VOTE = 62,
  SEARCH_AROUND = 63,
  MAGNIFIER = 64,
  SEARCH_BAG = 65,
  LOOK_DOWN = 66,
  LOOK_LEFT = 67,
  LOOK_RIGHT = 68,
  HANDS_LOVE_HEART = 69,
  AIR_KISS = 70,
  EXCELLENT = 71,
  DOUBT = 72,
  PECULIAR_SMILE = 73,
  DESPISE = 74,
  CROSS = 75,
  HANDS_WAVING = 76,
  TICK = 77,
  CLAP = 78,
  SUNGLASSES = 100,
  UMBRELLA = 101,
  WEAR_MASK = 102,
  MAKE_PHONE_CALL = 103,
  READ_MAP = 104,
  MUSIC_WITH_EARPHONE_ON = 105,
  CAMERA = 106,
  BLOW = 107,
  WAVE_GOODBYE = 108,
  EMOJITYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EMOJITYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EMOJITYPE_IsValid(int value);
const EMOJITYPE EMOJITYPE_MIN = SMILE;
const EMOJITYPE EMOJITYPE_MAX = WAVE_GOODBYE;
const int EMOJITYPE_ARRAYSIZE = EMOJITYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMOJITYPE_descriptor();
inline const ::std::string& EMOJITYPE_Name(EMOJITYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMOJITYPE_descriptor(), value);
}
inline bool EMOJITYPE_Parse(
    const ::std::string& name, EMOJITYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMOJITYPE>(
    EMOJITYPE_descriptor(), name, value);
}
enum RespondType {
  RespondType_START = 0,
  RespondType_END = 1,
  RespondType_GET = 2,
  RespondType_SET = 3,
  RespondType_AUTO = 4,
  RespondType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RespondType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RespondType_IsValid(int value);
const RespondType RespondType_MIN = RespondType_START;
const RespondType RespondType_MAX = RespondType_AUTO;
const int RespondType_ARRAYSIZE = RespondType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RespondType_descriptor();
inline const ::std::string& RespondType_Name(RespondType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RespondType_descriptor(), value);
}
inline bool RespondType_Parse(
    const ::std::string& name, RespondType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RespondType>(
    RespondType_descriptor(), name, value);
}
// ===================================================================

class Contrlinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Contrlinfo) */ {
 public:
  Contrlinfo();
  virtual ~Contrlinfo();

  Contrlinfo(const Contrlinfo& from);

  inline Contrlinfo& operator=(const Contrlinfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Contrlinfo& default_instance();

  static inline const Contrlinfo* internal_default_instance() {
    return reinterpret_cast<const Contrlinfo*>(
               &_Contrlinfo_default_instance_);
  }

  void Swap(Contrlinfo* other);

  // implements Message ----------------------------------------------

  inline Contrlinfo* New() const PROTOBUF_FINAL { return New(NULL); }

  Contrlinfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Contrlinfo& from);
  void MergeFrom(const Contrlinfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Contrlinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uuid = 12;
  void clear_uuid();
  static const int kUuidFieldNumber = 12;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string license_url = 13;
  void clear_license_url();
  static const int kLicenseUrlFieldNumber = 13;
  const ::std::string& license_url() const;
  void set_license_url(const ::std::string& value);
  #if LANG_CXX11
  void set_license_url(::std::string&& value);
  #endif
  void set_license_url(const char* value);
  void set_license_url(const char* value, size_t size);
  ::std::string* mutable_license_url();
  ::std::string* release_license_url();
  void set_allocated_license_url(::std::string* license_url);

  // int32 voice_position = 1;
  void clear_voice_position();
  static const int kVoicePositionFieldNumber = 1;
  ::google::protobuf::int32 voice_position() const;
  void set_voice_position(::google::protobuf::int32 value);

  // .EMOJITYPE Emoji_type = 2;
  void clear_emoji_type();
  static const int kEmojiTypeFieldNumber = 2;
  ::EMOJITYPE emoji_type() const;
  void set_emoji_type(::EMOJITYPE value);

  // int32 Emoji_time = 3;
  void clear_emoji_time();
  static const int kEmojiTimeFieldNumber = 3;
  ::google::protobuf::int32 emoji_time() const;
  void set_emoji_time(::google::protobuf::int32 value);

  // int32 turnAngle = 4;
  void clear_turnangle();
  static const int kTurnAngleFieldNumber = 4;
  ::google::protobuf::int32 turnangle() const;
  void set_turnangle(::google::protobuf::int32 value);

  // int32 backlight = 5;
  void clear_backlight();
  static const int kBacklightFieldNumber = 5;
  ::google::protobuf::int32 backlight() const;
  void set_backlight(::google::protobuf::int32 value);

  // bool main_switch = 6;
  void clear_main_switch();
  static const int kMainSwitchFieldNumber = 6;
  bool main_switch() const;
  void set_main_switch(bool value);

  // bool face_recognition_switch = 7;
  void clear_face_recognition_switch();
  static const int kFaceRecognitionSwitchFieldNumber = 7;
  bool face_recognition_switch() const;
  void set_face_recognition_switch(bool value);

  // bool welcome_mode_switch = 8;
  void clear_welcome_mode_switch();
  static const int kWelcomeModeSwitchFieldNumber = 8;
  bool welcome_mode_switch() const;
  void set_welcome_mode_switch(bool value);

  // bool see_off_mode_switch = 9;
  void clear_see_off_mode_switch();
  static const int kSeeOffModeSwitchFieldNumber = 9;
  bool see_off_mode_switch() const;
  void set_see_off_mode_switch(bool value);

  // bool emotion_recognition_switch = 10;
  void clear_emotion_recognition_switch();
  static const int kEmotionRecognitionSwitchFieldNumber = 10;
  bool emotion_recognition_switch() const;
  void set_emotion_recognition_switch(bool value);

  // bool fatigue_switch = 11;
  void clear_fatigue_switch();
  static const int kFatigueSwitchFieldNumber = 11;
  bool fatigue_switch() const;
  void set_fatigue_switch(bool value);

  // @@protoc_insertion_point(class_scope:Contrlinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr license_url_;
  ::google::protobuf::int32 voice_position_;
  int emoji_type_;
  ::google::protobuf::int32 emoji_time_;
  ::google::protobuf::int32 turnangle_;
  ::google::protobuf::int32 backlight_;
  bool main_switch_;
  bool face_recognition_switch_;
  bool welcome_mode_switch_;
  bool see_off_mode_switch_;
  bool emotion_recognition_switch_;
  bool fatigue_switch_;
  mutable int _cached_size_;
  friend struct  protobuf_HU_5fIRS_5fv0_2e2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IHUContrl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IHUContrl) */ {
 public:
  IHUContrl();
  virtual ~IHUContrl();

  IHUContrl(const IHUContrl& from);

  inline IHUContrl& operator=(const IHUContrl& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IHUContrl& default_instance();

  static inline const IHUContrl* internal_default_instance() {
    return reinterpret_cast<const IHUContrl*>(
               &_IHUContrl_default_instance_);
  }

  void Swap(IHUContrl* other);

  // implements Message ----------------------------------------------

  inline IHUContrl* New() const PROTOBUF_FINAL { return New(NULL); }

  IHUContrl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IHUContrl& from);
  void MergeFrom(const IHUContrl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IHUContrl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Contrlinfo info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::Contrlinfo& info() const;
  ::Contrlinfo* mutable_info();
  ::Contrlinfo* release_info();
  void set_allocated_info(::Contrlinfo* info);

  // .Contrltype type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Contrltype type() const;
  void set_type(::Contrltype value);

  // @@protoc_insertion_point(class_scope:IHUContrl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Contrlinfo* info_;
  int type_;
  mutable int _cached_size_;
  friend struct  protobuf_HU_5fIRS_5fv0_2e2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RespondInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RespondInfo) */ {
 public:
  RespondInfo();
  virtual ~RespondInfo();

  RespondInfo(const RespondInfo& from);

  inline RespondInfo& operator=(const RespondInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RespondInfo& default_instance();

  static inline const RespondInfo* internal_default_instance() {
    return reinterpret_cast<const RespondInfo*>(
               &_RespondInfo_default_instance_);
  }

  void Swap(RespondInfo* other);

  // implements Message ----------------------------------------------

  inline RespondInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RespondInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RespondInfo& from);
  void MergeFrom(const RespondInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RespondInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fail_image_url = 11;
  void clear_fail_image_url();
  static const int kFailImageUrlFieldNumber = 11;
  const ::std::string& fail_image_url() const;
  void set_fail_image_url(const ::std::string& value);
  #if LANG_CXX11
  void set_fail_image_url(::std::string&& value);
  #endif
  void set_fail_image_url(const char* value);
  void set_fail_image_url(const char* value, size_t size);
  ::std::string* mutable_fail_image_url();
  ::std::string* release_fail_image_url();
  void set_allocated_fail_image_url(::std::string* fail_image_url);

  // string video_url = 12;
  void clear_video_url();
  static const int kVideoUrlFieldNumber = 12;
  const ::std::string& video_url() const;
  void set_video_url(const ::std::string& value);
  #if LANG_CXX11
  void set_video_url(::std::string&& value);
  #endif
  void set_video_url(const char* value);
  void set_video_url(const char* value, size_t size);
  ::std::string* mutable_video_url();
  ::std::string* release_video_url();
  void set_allocated_video_url(::std::string* video_url);

  // string photo_url = 13;
  void clear_photo_url();
  static const int kPhotoUrlFieldNumber = 13;
  const ::std::string& photo_url() const;
  void set_photo_url(const ::std::string& value);
  #if LANG_CXX11
  void set_photo_url(::std::string&& value);
  #endif
  void set_photo_url(const char* value);
  void set_photo_url(const char* value, size_t size);
  ::std::string* mutable_photo_url();
  ::std::string* release_photo_url();
  void set_allocated_photo_url(::std::string* photo_url);

  // string activation_code = 14;
  void clear_activation_code();
  static const int kActivationCodeFieldNumber = 14;
  const ::std::string& activation_code() const;
  void set_activation_code(const ::std::string& value);
  #if LANG_CXX11
  void set_activation_code(::std::string&& value);
  #endif
  void set_activation_code(const char* value);
  void set_activation_code(const char* value, size_t size);
  ::std::string* mutable_activation_code();
  ::std::string* release_activation_code();
  void set_allocated_activation_code(::std::string* activation_code);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // int32 faceid = 2;
  void clear_faceid();
  static const int kFaceidFieldNumber = 2;
  ::google::protobuf::int32 faceid() const;
  void set_faceid(::google::protobuf::int32 value);

  // .Driver_Emotion emotion = 3;
  void clear_emotion();
  static const int kEmotionFieldNumber = 3;
  ::Driver_Emotion emotion() const;
  void set_emotion(::Driver_Emotion value);

  // .Driver_Fatigue fatigue = 4;
  void clear_fatigue();
  static const int kFatigueFieldNumber = 4;
  ::Driver_Fatigue fatigue() const;
  void set_fatigue(::Driver_Fatigue value);

  // bool main_switch = 5;
  void clear_main_switch();
  static const int kMainSwitchFieldNumber = 5;
  bool main_switch() const;
  void set_main_switch(bool value);

  // bool face_recognition_switch = 6;
  void clear_face_recognition_switch();
  static const int kFaceRecognitionSwitchFieldNumber = 6;
  bool face_recognition_switch() const;
  void set_face_recognition_switch(bool value);

  // bool welcome_mode_switch = 7;
  void clear_welcome_mode_switch();
  static const int kWelcomeModeSwitchFieldNumber = 7;
  bool welcome_mode_switch() const;
  void set_welcome_mode_switch(bool value);

  // bool see_off_mode_switch = 8;
  void clear_see_off_mode_switch();
  static const int kSeeOffModeSwitchFieldNumber = 8;
  bool see_off_mode_switch() const;
  void set_see_off_mode_switch(bool value);

  // bool emotion_recognition_switch = 9;
  void clear_emotion_recognition_switch();
  static const int kEmotionRecognitionSwitchFieldNumber = 9;
  bool emotion_recognition_switch() const;
  void set_emotion_recognition_switch(bool value);

  // bool fatigue_switch = 10;
  void clear_fatigue_switch();
  static const int kFatigueSwitchFieldNumber = 10;
  bool fatigue_switch() const;
  void set_fatigue_switch(bool value);

  // @@protoc_insertion_point(class_scope:RespondInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fail_image_url_;
  ::google::protobuf::internal::ArenaStringPtr video_url_;
  ::google::protobuf::internal::ArenaStringPtr photo_url_;
  ::google::protobuf::internal::ArenaStringPtr activation_code_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 faceid_;
  int emotion_;
  int fatigue_;
  bool main_switch_;
  bool face_recognition_switch_;
  bool welcome_mode_switch_;
  bool see_off_mode_switch_;
  bool emotion_recognition_switch_;
  bool fatigue_switch_;
  mutable int _cached_size_;
  friend struct  protobuf_HU_5fIRS_5fv0_2e2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IRSRespond : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IRSRespond) */ {
 public:
  IRSRespond();
  virtual ~IRSRespond();

  IRSRespond(const IRSRespond& from);

  inline IRSRespond& operator=(const IRSRespond& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IRSRespond& default_instance();

  static inline const IRSRespond* internal_default_instance() {
    return reinterpret_cast<const IRSRespond*>(
               &_IRSRespond_default_instance_);
  }

  void Swap(IRSRespond* other);

  // implements Message ----------------------------------------------

  inline IRSRespond* New() const PROTOBUF_FINAL { return New(NULL); }

  IRSRespond* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IRSRespond& from);
  void MergeFrom(const IRSRespond& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IRSRespond* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .RespondInfo result = 2;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::RespondInfo& result() const;
  ::RespondInfo* mutable_result();
  ::RespondInfo* release_result();
  void set_allocated_result(::RespondInfo* result);

  // .RespondType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::RespondType type() const;
  void set_type(::RespondType value);

  // @@protoc_insertion_point(class_scope:IRSRespond)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::RespondInfo* result_;
  int type_;
  mutable int _cached_size_;
  friend struct  protobuf_HU_5fIRS_5fv0_2e2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MsgResult) */ {
 public:
  MsgResult();
  virtual ~MsgResult();

  MsgResult(const MsgResult& from);

  inline MsgResult& operator=(const MsgResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgResult& default_instance();

  static inline const MsgResult* internal_default_instance() {
    return reinterpret_cast<const MsgResult*>(
               &_MsgResult_default_instance_);
  }

  void Swap(MsgResult* other);

  // implements Message ----------------------------------------------

  inline MsgResult* New() const PROTOBUF_FINAL { return New(NULL); }

  MsgResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsgResult& from);
  void MergeFrom(const MsgResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsgResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes error_code = 2;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  const ::std::string& error_code() const;
  void set_error_code(const ::std::string& value);
  #if LANG_CXX11
  void set_error_code(::std::string&& value);
  #endif
  void set_error_code(const char* value);
  void set_error_code(const void* value, size_t size);
  ::std::string* mutable_error_code();
  ::std::string* release_error_code();
  void set_allocated_error_code(::std::string* error_code);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:MsgResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_code_;
  bool result_;
  mutable int _cached_size_;
  friend struct  protobuf_HU_5fIRS_5fv0_2e2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TopMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TopMessage) */ {
 public:
  TopMessage();
  virtual ~TopMessage();

  TopMessage(const TopMessage& from);

  inline TopMessage& operator=(const TopMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopMessage& default_instance();

  static inline const TopMessage* internal_default_instance() {
    return reinterpret_cast<const TopMessage*>(
               &_TopMessage_default_instance_);
  }

  void Swap(TopMessage* other);

  // implements Message ----------------------------------------------

  inline TopMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  TopMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TopMessage& from);
  void MergeFrom(const TopMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TopMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .IHUContrl IHU_ctrl = 2;
  bool has_ihu_ctrl() const;
  void clear_ihu_ctrl();
  static const int kIHUCtrlFieldNumber = 2;
  const ::IHUContrl& ihu_ctrl() const;
  ::IHUContrl* mutable_ihu_ctrl();
  ::IHUContrl* release_ihu_ctrl();
  void set_allocated_ihu_ctrl(::IHUContrl* ihu_ctrl);

  // .IRSRespond IRS_Return = 3;
  bool has_irs_return() const;
  void clear_irs_return();
  static const int kIRSReturnFieldNumber = 3;
  const ::IRSRespond& irs_return() const;
  ::IRSRespond* mutable_irs_return();
  ::IRSRespond* release_irs_return();
  void set_allocated_irs_return(::IRSRespond* irs_return);

  // .MsgResult msg_result = 4;
  bool has_msg_result() const;
  void clear_msg_result();
  static const int kMsgResultFieldNumber = 4;
  const ::MsgResult& msg_result() const;
  ::MsgResult* mutable_msg_result();
  ::MsgResult* release_msg_result();
  void set_allocated_msg_result(::MsgResult* msg_result);

  // .Messagetype message_type = 1;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 1;
  ::Messagetype message_type() const;
  void set_message_type(::Messagetype value);

  // @@protoc_insertion_point(class_scope:TopMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::IHUContrl* ihu_ctrl_;
  ::IRSRespond* irs_return_;
  ::MsgResult* msg_result_;
  int message_type_;
  mutable int _cached_size_;
  friend struct  protobuf_HU_5fIRS_5fv0_2e2_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Contrlinfo

// int32 voice_position = 1;
inline void Contrlinfo::clear_voice_position() {
  voice_position_ = 0;
}
inline ::google::protobuf::int32 Contrlinfo::voice_position() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.voice_position)
  return voice_position_;
}
inline void Contrlinfo::set_voice_position(::google::protobuf::int32 value) {
  
  voice_position_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.voice_position)
}

// .EMOJITYPE Emoji_type = 2;
inline void Contrlinfo::clear_emoji_type() {
  emoji_type_ = 0;
}
inline ::EMOJITYPE Contrlinfo::emoji_type() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.Emoji_type)
  return static_cast< ::EMOJITYPE >(emoji_type_);
}
inline void Contrlinfo::set_emoji_type(::EMOJITYPE value) {
  
  emoji_type_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.Emoji_type)
}

// int32 Emoji_time = 3;
inline void Contrlinfo::clear_emoji_time() {
  emoji_time_ = 0;
}
inline ::google::protobuf::int32 Contrlinfo::emoji_time() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.Emoji_time)
  return emoji_time_;
}
inline void Contrlinfo::set_emoji_time(::google::protobuf::int32 value) {
  
  emoji_time_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.Emoji_time)
}

// int32 turnAngle = 4;
inline void Contrlinfo::clear_turnangle() {
  turnangle_ = 0;
}
inline ::google::protobuf::int32 Contrlinfo::turnangle() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.turnAngle)
  return turnangle_;
}
inline void Contrlinfo::set_turnangle(::google::protobuf::int32 value) {
  
  turnangle_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.turnAngle)
}

// int32 backlight = 5;
inline void Contrlinfo::clear_backlight() {
  backlight_ = 0;
}
inline ::google::protobuf::int32 Contrlinfo::backlight() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.backlight)
  return backlight_;
}
inline void Contrlinfo::set_backlight(::google::protobuf::int32 value) {
  
  backlight_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.backlight)
}

// bool main_switch = 6;
inline void Contrlinfo::clear_main_switch() {
  main_switch_ = false;
}
inline bool Contrlinfo::main_switch() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.main_switch)
  return main_switch_;
}
inline void Contrlinfo::set_main_switch(bool value) {
  
  main_switch_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.main_switch)
}

// bool face_recognition_switch = 7;
inline void Contrlinfo::clear_face_recognition_switch() {
  face_recognition_switch_ = false;
}
inline bool Contrlinfo::face_recognition_switch() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.face_recognition_switch)
  return face_recognition_switch_;
}
inline void Contrlinfo::set_face_recognition_switch(bool value) {
  
  face_recognition_switch_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.face_recognition_switch)
}

// bool welcome_mode_switch = 8;
inline void Contrlinfo::clear_welcome_mode_switch() {
  welcome_mode_switch_ = false;
}
inline bool Contrlinfo::welcome_mode_switch() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.welcome_mode_switch)
  return welcome_mode_switch_;
}
inline void Contrlinfo::set_welcome_mode_switch(bool value) {
  
  welcome_mode_switch_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.welcome_mode_switch)
}

// bool see_off_mode_switch = 9;
inline void Contrlinfo::clear_see_off_mode_switch() {
  see_off_mode_switch_ = false;
}
inline bool Contrlinfo::see_off_mode_switch() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.see_off_mode_switch)
  return see_off_mode_switch_;
}
inline void Contrlinfo::set_see_off_mode_switch(bool value) {
  
  see_off_mode_switch_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.see_off_mode_switch)
}

// bool emotion_recognition_switch = 10;
inline void Contrlinfo::clear_emotion_recognition_switch() {
  emotion_recognition_switch_ = false;
}
inline bool Contrlinfo::emotion_recognition_switch() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.emotion_recognition_switch)
  return emotion_recognition_switch_;
}
inline void Contrlinfo::set_emotion_recognition_switch(bool value) {
  
  emotion_recognition_switch_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.emotion_recognition_switch)
}

// bool fatigue_switch = 11;
inline void Contrlinfo::clear_fatigue_switch() {
  fatigue_switch_ = false;
}
inline bool Contrlinfo::fatigue_switch() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.fatigue_switch)
  return fatigue_switch_;
}
inline void Contrlinfo::set_fatigue_switch(bool value) {
  
  fatigue_switch_ = value;
  // @@protoc_insertion_point(field_set:Contrlinfo.fatigue_switch)
}

// string uuid = 12;
inline void Contrlinfo::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Contrlinfo::uuid() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.uuid)
  return uuid_.GetNoArena();
}
inline void Contrlinfo::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Contrlinfo.uuid)
}
#if LANG_CXX11
inline void Contrlinfo::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Contrlinfo.uuid)
}
#endif
inline void Contrlinfo::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Contrlinfo.uuid)
}
inline void Contrlinfo::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Contrlinfo.uuid)
}
inline ::std::string* Contrlinfo::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:Contrlinfo.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contrlinfo::release_uuid() {
  // @@protoc_insertion_point(field_release:Contrlinfo.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contrlinfo::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:Contrlinfo.uuid)
}

// string license_url = 13;
inline void Contrlinfo::clear_license_url() {
  license_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Contrlinfo::license_url() const {
  // @@protoc_insertion_point(field_get:Contrlinfo.license_url)
  return license_url_.GetNoArena();
}
inline void Contrlinfo::set_license_url(const ::std::string& value) {
  
  license_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Contrlinfo.license_url)
}
#if LANG_CXX11
inline void Contrlinfo::set_license_url(::std::string&& value) {
  
  license_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Contrlinfo.license_url)
}
#endif
inline void Contrlinfo::set_license_url(const char* value) {
  
  license_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Contrlinfo.license_url)
}
inline void Contrlinfo::set_license_url(const char* value, size_t size) {
  
  license_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Contrlinfo.license_url)
}
inline ::std::string* Contrlinfo::mutable_license_url() {
  
  // @@protoc_insertion_point(field_mutable:Contrlinfo.license_url)
  return license_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contrlinfo::release_license_url() {
  // @@protoc_insertion_point(field_release:Contrlinfo.license_url)
  
  return license_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contrlinfo::set_allocated_license_url(::std::string* license_url) {
  if (license_url != NULL) {
    
  } else {
    
  }
  license_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), license_url);
  // @@protoc_insertion_point(field_set_allocated:Contrlinfo.license_url)
}

// -------------------------------------------------------------------

// IHUContrl

// .Contrltype type = 1;
inline void IHUContrl::clear_type() {
  type_ = 0;
}
inline ::Contrltype IHUContrl::type() const {
  // @@protoc_insertion_point(field_get:IHUContrl.type)
  return static_cast< ::Contrltype >(type_);
}
inline void IHUContrl::set_type(::Contrltype value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:IHUContrl.type)
}

// .Contrlinfo info = 2;
inline bool IHUContrl::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void IHUContrl::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::Contrlinfo& IHUContrl::info() const {
  // @@protoc_insertion_point(field_get:IHUContrl.info)
  return info_ != NULL ? *info_
                         : *::Contrlinfo::internal_default_instance();
}
inline ::Contrlinfo* IHUContrl::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::Contrlinfo;
  }
  // @@protoc_insertion_point(field_mutable:IHUContrl.info)
  return info_;
}
inline ::Contrlinfo* IHUContrl::release_info() {
  // @@protoc_insertion_point(field_release:IHUContrl.info)
  
  ::Contrlinfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void IHUContrl::set_allocated_info(::Contrlinfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:IHUContrl.info)
}

// -------------------------------------------------------------------

// RespondInfo

// int32 status = 1;
inline void RespondInfo::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 RespondInfo::status() const {
  // @@protoc_insertion_point(field_get:RespondInfo.status)
  return status_;
}
inline void RespondInfo::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.status)
}

// int32 faceid = 2;
inline void RespondInfo::clear_faceid() {
  faceid_ = 0;
}
inline ::google::protobuf::int32 RespondInfo::faceid() const {
  // @@protoc_insertion_point(field_get:RespondInfo.faceid)
  return faceid_;
}
inline void RespondInfo::set_faceid(::google::protobuf::int32 value) {
  
  faceid_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.faceid)
}

// .Driver_Emotion emotion = 3;
inline void RespondInfo::clear_emotion() {
  emotion_ = 0;
}
inline ::Driver_Emotion RespondInfo::emotion() const {
  // @@protoc_insertion_point(field_get:RespondInfo.emotion)
  return static_cast< ::Driver_Emotion >(emotion_);
}
inline void RespondInfo::set_emotion(::Driver_Emotion value) {
  
  emotion_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.emotion)
}

// .Driver_Fatigue fatigue = 4;
inline void RespondInfo::clear_fatigue() {
  fatigue_ = 0;
}
inline ::Driver_Fatigue RespondInfo::fatigue() const {
  // @@protoc_insertion_point(field_get:RespondInfo.fatigue)
  return static_cast< ::Driver_Fatigue >(fatigue_);
}
inline void RespondInfo::set_fatigue(::Driver_Fatigue value) {
  
  fatigue_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.fatigue)
}

// bool main_switch = 5;
inline void RespondInfo::clear_main_switch() {
  main_switch_ = false;
}
inline bool RespondInfo::main_switch() const {
  // @@protoc_insertion_point(field_get:RespondInfo.main_switch)
  return main_switch_;
}
inline void RespondInfo::set_main_switch(bool value) {
  
  main_switch_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.main_switch)
}

// bool face_recognition_switch = 6;
inline void RespondInfo::clear_face_recognition_switch() {
  face_recognition_switch_ = false;
}
inline bool RespondInfo::face_recognition_switch() const {
  // @@protoc_insertion_point(field_get:RespondInfo.face_recognition_switch)
  return face_recognition_switch_;
}
inline void RespondInfo::set_face_recognition_switch(bool value) {
  
  face_recognition_switch_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.face_recognition_switch)
}

// bool welcome_mode_switch = 7;
inline void RespondInfo::clear_welcome_mode_switch() {
  welcome_mode_switch_ = false;
}
inline bool RespondInfo::welcome_mode_switch() const {
  // @@protoc_insertion_point(field_get:RespondInfo.welcome_mode_switch)
  return welcome_mode_switch_;
}
inline void RespondInfo::set_welcome_mode_switch(bool value) {
  
  welcome_mode_switch_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.welcome_mode_switch)
}

// bool see_off_mode_switch = 8;
inline void RespondInfo::clear_see_off_mode_switch() {
  see_off_mode_switch_ = false;
}
inline bool RespondInfo::see_off_mode_switch() const {
  // @@protoc_insertion_point(field_get:RespondInfo.see_off_mode_switch)
  return see_off_mode_switch_;
}
inline void RespondInfo::set_see_off_mode_switch(bool value) {
  
  see_off_mode_switch_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.see_off_mode_switch)
}

// bool emotion_recognition_switch = 9;
inline void RespondInfo::clear_emotion_recognition_switch() {
  emotion_recognition_switch_ = false;
}
inline bool RespondInfo::emotion_recognition_switch() const {
  // @@protoc_insertion_point(field_get:RespondInfo.emotion_recognition_switch)
  return emotion_recognition_switch_;
}
inline void RespondInfo::set_emotion_recognition_switch(bool value) {
  
  emotion_recognition_switch_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.emotion_recognition_switch)
}

// bool fatigue_switch = 10;
inline void RespondInfo::clear_fatigue_switch() {
  fatigue_switch_ = false;
}
inline bool RespondInfo::fatigue_switch() const {
  // @@protoc_insertion_point(field_get:RespondInfo.fatigue_switch)
  return fatigue_switch_;
}
inline void RespondInfo::set_fatigue_switch(bool value) {
  
  fatigue_switch_ = value;
  // @@protoc_insertion_point(field_set:RespondInfo.fatigue_switch)
}

// string fail_image_url = 11;
inline void RespondInfo::clear_fail_image_url() {
  fail_image_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RespondInfo::fail_image_url() const {
  // @@protoc_insertion_point(field_get:RespondInfo.fail_image_url)
  return fail_image_url_.GetNoArena();
}
inline void RespondInfo::set_fail_image_url(const ::std::string& value) {
  
  fail_image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RespondInfo.fail_image_url)
}
#if LANG_CXX11
inline void RespondInfo::set_fail_image_url(::std::string&& value) {
  
  fail_image_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RespondInfo.fail_image_url)
}
#endif
inline void RespondInfo::set_fail_image_url(const char* value) {
  
  fail_image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RespondInfo.fail_image_url)
}
inline void RespondInfo::set_fail_image_url(const char* value, size_t size) {
  
  fail_image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RespondInfo.fail_image_url)
}
inline ::std::string* RespondInfo::mutable_fail_image_url() {
  
  // @@protoc_insertion_point(field_mutable:RespondInfo.fail_image_url)
  return fail_image_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RespondInfo::release_fail_image_url() {
  // @@protoc_insertion_point(field_release:RespondInfo.fail_image_url)
  
  return fail_image_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RespondInfo::set_allocated_fail_image_url(::std::string* fail_image_url) {
  if (fail_image_url != NULL) {
    
  } else {
    
  }
  fail_image_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fail_image_url);
  // @@protoc_insertion_point(field_set_allocated:RespondInfo.fail_image_url)
}

// string video_url = 12;
inline void RespondInfo::clear_video_url() {
  video_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RespondInfo::video_url() const {
  // @@protoc_insertion_point(field_get:RespondInfo.video_url)
  return video_url_.GetNoArena();
}
inline void RespondInfo::set_video_url(const ::std::string& value) {
  
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RespondInfo.video_url)
}
#if LANG_CXX11
inline void RespondInfo::set_video_url(::std::string&& value) {
  
  video_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RespondInfo.video_url)
}
#endif
inline void RespondInfo::set_video_url(const char* value) {
  
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RespondInfo.video_url)
}
inline void RespondInfo::set_video_url(const char* value, size_t size) {
  
  video_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RespondInfo.video_url)
}
inline ::std::string* RespondInfo::mutable_video_url() {
  
  // @@protoc_insertion_point(field_mutable:RespondInfo.video_url)
  return video_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RespondInfo::release_video_url() {
  // @@protoc_insertion_point(field_release:RespondInfo.video_url)
  
  return video_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RespondInfo::set_allocated_video_url(::std::string* video_url) {
  if (video_url != NULL) {
    
  } else {
    
  }
  video_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_url);
  // @@protoc_insertion_point(field_set_allocated:RespondInfo.video_url)
}

// string photo_url = 13;
inline void RespondInfo::clear_photo_url() {
  photo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RespondInfo::photo_url() const {
  // @@protoc_insertion_point(field_get:RespondInfo.photo_url)
  return photo_url_.GetNoArena();
}
inline void RespondInfo::set_photo_url(const ::std::string& value) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RespondInfo.photo_url)
}
#if LANG_CXX11
inline void RespondInfo::set_photo_url(::std::string&& value) {
  
  photo_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RespondInfo.photo_url)
}
#endif
inline void RespondInfo::set_photo_url(const char* value) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RespondInfo.photo_url)
}
inline void RespondInfo::set_photo_url(const char* value, size_t size) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RespondInfo.photo_url)
}
inline ::std::string* RespondInfo::mutable_photo_url() {
  
  // @@protoc_insertion_point(field_mutable:RespondInfo.photo_url)
  return photo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RespondInfo::release_photo_url() {
  // @@protoc_insertion_point(field_release:RespondInfo.photo_url)
  
  return photo_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RespondInfo::set_allocated_photo_url(::std::string* photo_url) {
  if (photo_url != NULL) {
    
  } else {
    
  }
  photo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo_url);
  // @@protoc_insertion_point(field_set_allocated:RespondInfo.photo_url)
}

// string activation_code = 14;
inline void RespondInfo::clear_activation_code() {
  activation_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RespondInfo::activation_code() const {
  // @@protoc_insertion_point(field_get:RespondInfo.activation_code)
  return activation_code_.GetNoArena();
}
inline void RespondInfo::set_activation_code(const ::std::string& value) {
  
  activation_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RespondInfo.activation_code)
}
#if LANG_CXX11
inline void RespondInfo::set_activation_code(::std::string&& value) {
  
  activation_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RespondInfo.activation_code)
}
#endif
inline void RespondInfo::set_activation_code(const char* value) {
  
  activation_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RespondInfo.activation_code)
}
inline void RespondInfo::set_activation_code(const char* value, size_t size) {
  
  activation_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RespondInfo.activation_code)
}
inline ::std::string* RespondInfo::mutable_activation_code() {
  
  // @@protoc_insertion_point(field_mutable:RespondInfo.activation_code)
  return activation_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RespondInfo::release_activation_code() {
  // @@protoc_insertion_point(field_release:RespondInfo.activation_code)
  
  return activation_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RespondInfo::set_allocated_activation_code(::std::string* activation_code) {
  if (activation_code != NULL) {
    
  } else {
    
  }
  activation_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activation_code);
  // @@protoc_insertion_point(field_set_allocated:RespondInfo.activation_code)
}

// -------------------------------------------------------------------

// IRSRespond

// .RespondType type = 1;
inline void IRSRespond::clear_type() {
  type_ = 0;
}
inline ::RespondType IRSRespond::type() const {
  // @@protoc_insertion_point(field_get:IRSRespond.type)
  return static_cast< ::RespondType >(type_);
}
inline void IRSRespond::set_type(::RespondType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:IRSRespond.type)
}

// .RespondInfo result = 2;
inline bool IRSRespond::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void IRSRespond::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
inline const ::RespondInfo& IRSRespond::result() const {
  // @@protoc_insertion_point(field_get:IRSRespond.result)
  return result_ != NULL ? *result_
                         : *::RespondInfo::internal_default_instance();
}
inline ::RespondInfo* IRSRespond::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::RespondInfo;
  }
  // @@protoc_insertion_point(field_mutable:IRSRespond.result)
  return result_;
}
inline ::RespondInfo* IRSRespond::release_result() {
  // @@protoc_insertion_point(field_release:IRSRespond.result)
  
  ::RespondInfo* temp = result_;
  result_ = NULL;
  return temp;
}
inline void IRSRespond::set_allocated_result(::RespondInfo* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:IRSRespond.result)
}

// -------------------------------------------------------------------

// MsgResult

// bool result = 1;
inline void MsgResult::clear_result() {
  result_ = false;
}
inline bool MsgResult::result() const {
  // @@protoc_insertion_point(field_get:MsgResult.result)
  return result_;
}
inline void MsgResult::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:MsgResult.result)
}

// bytes error_code = 2;
inline void MsgResult::clear_error_code() {
  error_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgResult::error_code() const {
  // @@protoc_insertion_point(field_get:MsgResult.error_code)
  return error_code_.GetNoArena();
}
inline void MsgResult::set_error_code(const ::std::string& value) {
  
  error_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MsgResult.error_code)
}
#if LANG_CXX11
inline void MsgResult::set_error_code(::std::string&& value) {
  
  error_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MsgResult.error_code)
}
#endif
inline void MsgResult::set_error_code(const char* value) {
  
  error_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MsgResult.error_code)
}
inline void MsgResult::set_error_code(const void* value, size_t size) {
  
  error_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MsgResult.error_code)
}
inline ::std::string* MsgResult::mutable_error_code() {
  
  // @@protoc_insertion_point(field_mutable:MsgResult.error_code)
  return error_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgResult::release_error_code() {
  // @@protoc_insertion_point(field_release:MsgResult.error_code)
  
  return error_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgResult::set_allocated_error_code(::std::string* error_code) {
  if (error_code != NULL) {
    
  } else {
    
  }
  error_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_code);
  // @@protoc_insertion_point(field_set_allocated:MsgResult.error_code)
}

// -------------------------------------------------------------------

// TopMessage

// .Messagetype message_type = 1;
inline void TopMessage::clear_message_type() {
  message_type_ = 0;
}
inline ::Messagetype TopMessage::message_type() const {
  // @@protoc_insertion_point(field_get:TopMessage.message_type)
  return static_cast< ::Messagetype >(message_type_);
}
inline void TopMessage::set_message_type(::Messagetype value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:TopMessage.message_type)
}

// .IHUContrl IHU_ctrl = 2;
inline bool TopMessage::has_ihu_ctrl() const {
  return this != internal_default_instance() && ihu_ctrl_ != NULL;
}
inline void TopMessage::clear_ihu_ctrl() {
  if (GetArenaNoVirtual() == NULL && ihu_ctrl_ != NULL) delete ihu_ctrl_;
  ihu_ctrl_ = NULL;
}
inline const ::IHUContrl& TopMessage::ihu_ctrl() const {
  // @@protoc_insertion_point(field_get:TopMessage.IHU_ctrl)
  return ihu_ctrl_ != NULL ? *ihu_ctrl_
                         : *::IHUContrl::internal_default_instance();
}
inline ::IHUContrl* TopMessage::mutable_ihu_ctrl() {
  
  if (ihu_ctrl_ == NULL) {
    ihu_ctrl_ = new ::IHUContrl;
  }
  // @@protoc_insertion_point(field_mutable:TopMessage.IHU_ctrl)
  return ihu_ctrl_;
}
inline ::IHUContrl* TopMessage::release_ihu_ctrl() {
  // @@protoc_insertion_point(field_release:TopMessage.IHU_ctrl)
  
  ::IHUContrl* temp = ihu_ctrl_;
  ihu_ctrl_ = NULL;
  return temp;
}
inline void TopMessage::set_allocated_ihu_ctrl(::IHUContrl* ihu_ctrl) {
  delete ihu_ctrl_;
  ihu_ctrl_ = ihu_ctrl;
  if (ihu_ctrl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:TopMessage.IHU_ctrl)
}

// .IRSRespond IRS_Return = 3;
inline bool TopMessage::has_irs_return() const {
  return this != internal_default_instance() && irs_return_ != NULL;
}
inline void TopMessage::clear_irs_return() {
  if (GetArenaNoVirtual() == NULL && irs_return_ != NULL) delete irs_return_;
  irs_return_ = NULL;
}
inline const ::IRSRespond& TopMessage::irs_return() const {
  // @@protoc_insertion_point(field_get:TopMessage.IRS_Return)
  return irs_return_ != NULL ? *irs_return_
                         : *::IRSRespond::internal_default_instance();
}
inline ::IRSRespond* TopMessage::mutable_irs_return() {
  
  if (irs_return_ == NULL) {
    irs_return_ = new ::IRSRespond;
  }
  // @@protoc_insertion_point(field_mutable:TopMessage.IRS_Return)
  return irs_return_;
}
inline ::IRSRespond* TopMessage::release_irs_return() {
  // @@protoc_insertion_point(field_release:TopMessage.IRS_Return)
  
  ::IRSRespond* temp = irs_return_;
  irs_return_ = NULL;
  return temp;
}
inline void TopMessage::set_allocated_irs_return(::IRSRespond* irs_return) {
  delete irs_return_;
  irs_return_ = irs_return;
  if (irs_return) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:TopMessage.IRS_Return)
}

// .MsgResult msg_result = 4;
inline bool TopMessage::has_msg_result() const {
  return this != internal_default_instance() && msg_result_ != NULL;
}
inline void TopMessage::clear_msg_result() {
  if (GetArenaNoVirtual() == NULL && msg_result_ != NULL) delete msg_result_;
  msg_result_ = NULL;
}
inline const ::MsgResult& TopMessage::msg_result() const {
  // @@protoc_insertion_point(field_get:TopMessage.msg_result)
  return msg_result_ != NULL ? *msg_result_
                         : *::MsgResult::internal_default_instance();
}
inline ::MsgResult* TopMessage::mutable_msg_result() {
  
  if (msg_result_ == NULL) {
    msg_result_ = new ::MsgResult;
  }
  // @@protoc_insertion_point(field_mutable:TopMessage.msg_result)
  return msg_result_;
}
inline ::MsgResult* TopMessage::release_msg_result() {
  // @@protoc_insertion_point(field_release:TopMessage.msg_result)
  
  ::MsgResult* temp = msg_result_;
  msg_result_ = NULL;
  return temp;
}
inline void TopMessage::set_allocated_msg_result(::MsgResult* msg_result) {
  delete msg_result_;
  msg_result_ = msg_result;
  if (msg_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:TopMessage.msg_result)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Messagetype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Messagetype>() {
  return ::Messagetype_descriptor();
}
template <> struct is_proto_enum< ::Contrltype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Contrltype>() {
  return ::Contrltype_descriptor();
}
template <> struct is_proto_enum< ::Driver_Emotion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Driver_Emotion>() {
  return ::Driver_Emotion_descriptor();
}
template <> struct is_proto_enum< ::Driver_Fatigue> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Driver_Fatigue>() {
  return ::Driver_Fatigue_descriptor();
}
template <> struct is_proto_enum< ::EMOJITYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMOJITYPE>() {
  return ::EMOJITYPE_descriptor();
}
template <> struct is_proto_enum< ::RespondType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RespondType>() {
  return ::RespondType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HU_5fIRS_5fv0_2e2_2eproto__INCLUDED
